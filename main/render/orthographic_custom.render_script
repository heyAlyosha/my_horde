local camera = require "orthographic.camera"
local storage_gui = require "main.storage.storage_gui"
local storage_player = require "main.storage.storage_player"

camera.ORTHOGRAPHIC_RENDER_SCRIPT_USED = true

local CLEAR_COLOR = hash("clear_color")

local IDENTITY = vmath.matrix4()

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)
end

function update(self)
	-- clear color
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
	render.set_depth_mask(false)
	
	-- set default blend state
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)

	-- draw world per camera
	local cameras = camera.get_cameras()
	local frustum = nil
	local view = nil
	local proj = nil
	if #cameras > 0 then
		render.disable_state(render.STATE_DEPTH_TEST)
		render.disable_state(render.STATE_CULL_FACE)
		render.disable_state(render.STATE_STENCIL_TEST)
		for _,camera_id in ipairs(cameras) do
			local viewport = camera.get_viewport(camera_id)
			render.set_viewport(viewport.x, viewport.y, viewport.z, viewport.w)
			view = camera.get_view(camera_id)
			render.set_view(view)
			proj = camera.get_projection(camera_id)
			render.set_projection(proj)
			frustum = proj * view
			render.draw(self.tile_pred, {frustum = frustum})
			render.draw(self.particle_pred, {frustum = frustum})
			render.draw_debug3d()
			
		end
	end
	
	-- draw gui in screen space using an orthographic projection
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_CULL_FACE)
	render.enable_state(render.STATE_STENCIL_TEST)
	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
	view = IDENTITY
	render.set_view(view)
	proj = vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1000, 1000)
	render.set_projection(proj)
	frustum = proj * view
	render.draw(self.gui_pred, {frustum = frustum})
	render.draw(self.text_pred, {frustum = frustum})
	render.disable_state(render.STATE_STENCIL_TEST)

	-- CUSTOM PART --
	storage_player.window_width = render.get_window_width()
	storage_player.window_height = render.get_window_height()

	local width = render.get_width()
	local height = render.get_height()
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()

	local zoom
	if render.get_window_width() < render.get_window_height() then
		-- Вертикальная ориентация
		storage_player.orientation = "vertical"
		width = render.get_height()
		height = render.get_width()
		zoom = (height / width)

	else
		-- Горизонтальная ориентация
		storage_player.orientation = "horisontal"
		--zoom = math.min(window_width / width, window_height / height)
		zoom = 1
	end

	--pprint("zoom", zoom)

	storage_player.zoom = zoom
	--camera.set_zoom(camera_id, zoom)

	-- CUSTOM PART --
end

function on_message(self, message_id, message)
	if message_id == CLEAR_COLOR then
		self.clear_color = message.color

	elseif message_id == hash("window_resized") then
		
		-- Отправляем, что окно изменилось
		for id, url in pairs(storage_gui.components_visible) do
			msg.post(url, "window_resize", {width = render.get_window_width(), height = render.get_window_height()})
		end

		--msg.post("game-room:/leader", "window_resize", {width = render.get_window_width(), height = render.get_window_height()})
		msg.post("main:/camera", "window_resize", {width = render.get_window_width(), height = render.get_window_height()})

	end
end