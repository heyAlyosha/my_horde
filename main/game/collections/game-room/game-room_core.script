local storage_player = require "main.storage.storage_player"

function init(self)
	-- Позиции объектов для разных ориентация
	self.positions = {
		vertical = {
			leader = vmath.vector3(1368, 386, 10),
			leader_dialog_spawn = vmath.vector3(1403, 400, 10),
			thumba_1 = vmath.vector3(533, 304, 11),
			thumba_1_dialog_spawn = vmath.vector3(639, 428, 0),
			thumba_2 = vmath.vector3(694, 393, 10),
			thumba_2_dialog_spawn = vmath.vector3(865, 584, 0),
			thumba_3 = vmath.vector3(839, 441, 9),
			thumba_3_dialog_spawn = vmath.vector3(972, 664, 0),
		},
		horisontal = {
			leader = vmath.vector3(1700, 491, 10),
			leader_dialog_spawn = vmath.vector3(1735, 589, 10),
			--leader_dialog_spawn = vmath.vector3(0, 639, 10),
			thumba_1 = vmath.vector3(236, 384, 11),
			thumba_1_dialog_spawn = vmath.vector3(342, 558, 0),
			thumba_2 = vmath.vector3(407, 525, 10),
			thumba_2_dialog_spawn = vmath.vector3(508, 706, 0),
			thumba_3 = vmath.vector3(565, 590, 9),
			thumba_3_dialog_spawn = vmath.vector3(664, 765, 0),
		},
	}

	msg.post("game-room:/loader_gui", "visible", {id = "up_label_scene", visible = true})

	self.url = msg.url()

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Изменение ориентации экрана
	if self.orientation ~= storage_player.orientation then
		self.orientation = storage_player.orientation
		for id, position in pairs(self.positions[self.orientation]) do
			go.set_position(position, id)
			msg.post(id, "change_orientation", {orientation = self.orientation, position = position})
		end
	end
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)

	if message_id == hash("window_update") then
		-- Определяем ориентацию экрана
		if message.viewport.width > message.viewport.height then
			storage_player.orientation = "horisontal"
		else
			storage_player.orientation = "vertical"
		end

		-- зумируем
		local width = 1920
		local height = 1080
		local window_width = message.viewport.width
		local window_height = message.viewport.height

		local zoom

		--[[
		if storage_player.orientation == "vertical" then
			-- Вертикальная ориентация
			width = height
			height = width
			zoom = window_width / width

		else
			-- Горизонтальная ориентация
			zoom = math.min(window_width / width, window_height / height)
		end
		

		--pprint(rendercam.ortho_zoom_mult)
		--rendercam.zoom(zoom)
		rendercam.set_ortho_scale(0.5 / zoom)
		--]]
		

	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
