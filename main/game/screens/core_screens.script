-- Управление экранами игры
local core_screens_visible_gui = require "main.game.screens.modules.core_screens_visible_gui"
local storage_game = require "main.game.storage.storage_game"
local core_prorgress = require "main.core.core_progress.core_prorgress"
local game_content_company = require "main.game.content.game_content_company"

function init(self)
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("main_menu") then
		msg.post("/loader_gui", "visible", {
			id = "bg",
			visible = true
		})
		core_screens_visible_gui.visible_components(self, {main_menu = true, interface = true})
		msg.post("main:/music", "play", {sound = "music-default", loop = nil})
		msg.post("/loader_gui", "set_content", {id = "interface", type = "set_btns", 
			value = {
				id =  "default"
			}
		})

	elseif message_id == hash("catalog_company") then
		msg.post("/loader_gui", "visible", {
			id = "bg",
			visible = true
		})

		local components_data = {
			catalog_company = {category_id = message.category_id}
		}
		
		core_screens_visible_gui.visible_components(self, {catalog_company = true, interface = true}, components_data)
			msg.post("main:/music", "play", {sound = "music-default", loop = nil})
			msg.post("/loader_gui", "set_content", {id = "interface", type = "set_btns", 
			value = {
				id =  "default"
			}
		})

	elseif message_id == hash("catalog_levels") then
		if message.category_id == "tournir" then
			-- Если это турнир
			msg.post("game-room:/core_game", "start_tournir")

			return

		elseif message.from_company then
			-- Открывают из каталога компаний
			
			local company = game_content_company.get_id(message.category_id, user_lang)

			-- Смотрим есть ли уже прохождения
			for i, level in ipairs(company.levels) do
				local progress = core_prorgress.get_progress_level(message.category_id, i)

				-- Если не пройденный уровень, продалжаем игру с этого места
				if not progress then
					msg.post("game-room:/core_game", "start_company_level", {category_id = message.category_id, level_id = i})
					return
				end
			end
		end
		msg.post("/loader_gui", "visible", {
			id = "bg",
			visible = true
		})

		local components_data = {
			catalog_levels = {category_id = message.category_id, focus_card = message.focus_card}
		}

		core_screens_visible_gui.visible_components(self, {catalog_levels = true, interface = true}, components_data)
		msg.post("main:/music", "play", {sound = "music-default", loop = nil})
		msg.post("/loader_gui", "set_content", {id = "interface", type = "set_btns", 
			value = {
				id =  "default"
			}
		})

	elseif message_id == hash("game") then
		msg.post("main:/loader_gui", "visible", {
			id = "bg",
			visible = false
		})

		msg.post("main:/core_game", "set_active", {
			active = true
		})

		local components_data = {}
		core_screens_visible_gui.visible_components(self, {interface = true}, components_data)

		if storage_gui.core_screens.visible_shop then
			msg.post("main:/loader_gui", "set_content", {id = "interface", type = "set_btns", 
				value = {
					id =  "game_play"
				}
			})
		else
			msg.post("main:/loader_gui", "set_content", {id = "interface", type = "set_btns", 
				value = {
					id =  "game_play_first_level"
				}
			})
		end

	elseif message_id == hash("continue_game_from_pause") then
		msg.post("main:/core_game", "set_active", {
			active = true
		})

		if storage_gui.core_screens.visible_shop then
			msg.post("main:/loader_gui", "set_content", {id = "interface", type = "set_btns", 
			value = {
				id =  "game_play"
			}
		})
		else
			msg.post("main:/loader_gui", "set_content", {id = "interface", type = "set_btns", 
				value = {
					id =  "game_play_first_level"
				}
			})
		end

		msg.post("/loader_main", "game_continue")

	elseif message_id == hash("next_level") then	
		-- Следующий уровень

	elseif message_id == hash("pause") then
		msg.post("main:/core_game", "set_active", {
			active = true
		})

		msg.post("/loader_gui", "visible", {
			id = "modal_pause",
			visible = true,
			type = hash("popup")
		})

		msg.post("/loader_gui", "set_content", {id = "interface", type = "set_btns", 
			value = {
				id =  "game_pause"
			}
		})

		msg.post("/loader_main", "pause")

	elseif message_id == hash("continue_game") then
		msg.post("/loader_gui", "set_content", {id = "interface", type = "set_btns", 
			value = {
				id =  "default"
			}
		})

		msg.post("/loader_main", "game_continue")

	elseif message_id == hash("back_menu") then
		-- Возврат в меню из игры
		core_screens_visible_gui.visible_components(self, {interface = true}, components_data)

		msg.post("/loader_gui", "set_status", {
			id = "interface",
			type = "stars_visible",
			visible = false
		})

		msg.post("/loader_main", "reload_game_room")
		--msg.post("/loader_main", "event", {id = "set_to_start"})

		if storage_game.game.message_start.category_id then
			msg.post(".", "catalog_levels", {category_id = storage_game.game.message_start.category_id, focus_card = storage_game.game.message_start.level_id})

		else
			msg.post(".", "catalog_company")

		end

	elseif message_id == hash("refresh_round") then
		-- Новый раунд
		core_screens_visible_gui.visible_components(self, {interface = true}, components_data)

		msg.post("/loader_main", "reload_game_room", {refresh_game = true})

	elseif message_id == hash("game_result") then
		msg.post("main:/core_game", "set_active", {
			active = false
		})

		local components_data

		core_screens_visible_gui.visible_components(self, {interface = true}, components_data)

		--[[
		if message.type == "win" then
			msg.post("main:/music", "play", {sound = "music-default", loop = nil})

		elseif message.type == "fail" then
			msg.post("main:/music", "play", {sound = "music-fail", loop = nil})

		elseif message.type == "family" then
			msg.post("main:/music", "play", {sound = "music-fail", loop = nil})
		end
		--]]
		
		msg.post("/loader_gui", "set_content", {id = "interface", type = "set_btns", 
			value = {
				id =  "game_pause"
			}
		})

	elseif message_id == hash("clear") then
		core_screens_visible_gui.visible_components(self, {})

	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
