go.property("damage", 1)
go.property("speed_damage", 0.25)
go.property("speed", 20)
go.property("command", hash("player"))

function init(self)
	-- this tells the engine to send input to on_input() in this script
	msg.post(".", "acquire_input_focus")

	self.input = vmath.vector3(0)
	self.velocity = vmath.vector3(0)
	self.correction = vmath.vector3()
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if vmath.length_sqr(self.input) > 1 then
		self.input = vmath.normalize(self.input)
	end

	-- Движение
	local movement = self.input * self.speed * dt
	local p = go.get_position()
	go.set_position(p + movement)

	-- Анимация
	if vmath.length(movement) > 0 then
		character_animations.play(self, "move")
		sprite.set_hflip("#body", movement.x < 0)
	else
		character_animations.play(self, "idle")
	end

	self.input = vmath.vector3()
	self.correction = vmath.vector3()
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		-- СТолкновение с физическим объектом
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + comp)
				self.correction = self.correction + comp
			end
		end

	elseif message_id == hash("trigger_response") and message.own_group == hash("attack") then
		
		if message.enter then
			-- Объект для повреждения вошёл поле атаки
			local url_object = message.other_id
			self.type_bullet = hash("bullet_hit")

			-- Место спавна пули
			local position = go.get_position()
			-- Поворачиваем пулю в нужное управление
			local rot = vmath.normalize(position - go.get_position(url_object))
			local angle = math.atan2(rot.y, rot.x)
			local rotation = vmath.quat_rotation_z(angle) 
			-- Свойства пули
			local properties = {
				command = self.command,
				damage = self.damage,
				damage_count_object = 5,
				type = hash("hit"),
				from_id_object = go.get_id()
			}
			factory.create("#bullet_hit_factory", position, rotation, properties)

			self.timer_atack = timer.delay(self.speed_damage, true, function (self, handle, time_elapsed)
				if storage_game.go_urls[message.other_id] then
					-- Место спавна пули
					local position = go.get_position()
					-- Поворачиваем пулю в нужное управление
					local rot = vmath.normalize(go.get_position(url_object) - position)
					local angle = math.atan2(rot.y, rot.x)
					local rotation = vmath.quat_rotation_z(angle)
					factory.create("#bullet_hit_factory", position, rotation, properties)

				else
					timer.cancel(handle)
					self.timer_atack = nil
				end
			end)

		else
			if self.timer_atack then
				timer.cancel(self.timer_atack)
				self.timer_atack = nil
			end
		end
		pprint(message_id, message)
	end
	
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1                     -- [1]
	elseif action_id == hash("down") then
		self.input.y = -1                    -- [1]
	elseif action_id == hash("left") then
		self.input.x = -1                    -- [1]
	elseif action_id == hash("right") then
		self.input.x = 1                     -- [1]
	elseif action_id == hash("action") and action.pressed then
		character_animations.play(self, "attack")
		
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
