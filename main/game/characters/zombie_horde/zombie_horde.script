go.property("damage", 1)
go.property("speed_damage", 0.25)
go.property("speed_to_object", 30)
go.property("command", hash("player"))
go.property("skin_id", 0)
go.property("human_id", 1)
go.property("parent", msg.url())
go.property("position_to", vmath.vector3())

function init(self)
	storage_game.go_objects[go.get_id()] = {
		type = hash("zombie_horde"),
		url = msg.url(),
		collision_physic = nil,
		skin_id = self.skin_id,
		human_id = self.human_id,
		command = self.command,
		storage = {}
	}
	sprite.play_flipbook("#body", "zombie_"..self.skin_id.."_"..self.human_id .. "_default")

	position_functions.go_set_perspective_z()

	self.input = vmath.vector3(0)
	self.velocity = vmath.vector3(0)
	self.correction = vmath.vector3()
end

function final(self)
	storage_game.go_objects[go.get_id()] = nil
end

function on_message(self, message_id, message, sender)
	if message_id == hash("contact_point_response") then
		-- СТолкновение с физическим объектом
		storage_game.go_objects[go.get_id()].collision_physic = {
			message_id = message_id,
			message = message,
		}

		if message.distance > 0 then
			--[[
			self.input = self.input or vmath.vector3(0)
			self.input = vmath.normalize(self.position_to - go.get_position())

			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				self.comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + self.input + self.comp)
				--go.set_position(message.position)
				self.correction = self.correction + self.comp
				self.position_to = nil
			end
			--]]

			--pprint(v)
			
			--]]
			--go.animate(url, property, playback, to, easing, duration)
			--go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, go.get_position() + message.normal * message.distanc, go.EASING_LINEAR, 0.1)
			--go.set_position(go.get_position() + message.normal * message.distance)
			--self.position_to
			--local position_to = vmath.normalize(go.get_position() - self.position_to)
			--go.set_position(self.position_to + (position_to + message.normal) * message.distance)
			--go.set_position(self.position_to + message.normal)
			
			--pprint("contact_point_response", proj)
		else
			self.comp = nil
		end
		
		--[[
		--]]
	end
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
