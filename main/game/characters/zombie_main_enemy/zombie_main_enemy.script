go.property("activate", true)
go.property("horde_count", 5)
go.property("horde_map", true)
go.property("dir", vmath.vector(-1,0,0))
go.property("max_horde", 30)
go.property("ai_dist_way", 50)
go.property("ai_dist_visible", 30)
go.property("ai_interval_visible", 30)
go.property("ai_character", hash("default")) -- "pacific/agressive"
go.property("distantion_visible", 50) -- "pacific/agressive"
go.property("time_view", 1)
go.property("damage", 2)
go.property("live", 200)
go.property("speed_damage", 0.75)
go.property("speed", 20)
go.property("speed_default", 30)
go.property("speed_attack", 40)
go.property("scale_attack", 1)
go.property("distantion_attack", 35)
go.property("command", hash("zombie_enemy"))
go.property("id_characteristic", hash("zombie_main_enemy_map"))
go.property("skin_id", 0)
go.property("human_id", 0)
go.property("visible_horde_min", 100)
go.property("distantion_attack_zombie_horde", 75)
go.property("targets", 6)
go.property("target_dynamic", true)
go.property("target_dist", vmath.vector3(4, 0, 0))
go.property("target_useful", 3)
go.property("target_add_horde", vmath.vector3())
go.property("time_view", 0.1)
go.property("damage_blood", true)
go.property("type_object", hash("zombie_main_enemy"))
go.property("horde_count_current", 0)
go.property("active_input", true)
go.property("size_horde", 0)
go.property("attack_horde", false)
go.property("is_circle_horde", false)
go.property("atlas_first_level", resource.atlas("/main/atlases/first_level.atlas"))
go.property("atlas_skins", resource.atlas("/main/atlases/first_level.atlas"))
go.property("spawn_coins", 0)
go.property("spawn_xp", 0)
go.property("zombie_live", 20)
go.property("zombie_damage", 1)
go.property("zombie_speed_damage", 0.75)
go.property("zombie_scale_attack", 0.5)

function init(self)
	game_content_character_parametrs.set_characteristic(self, self.id_characteristic)

	self.distantion_attack = self.distantion_attack * self.scale_attack

	go_controller.object_items_spawn_to_map(self)

	self.targets_points = {
		vmath.vector3(12, 6, 0),
		vmath.vector3(15, 0, 0),
		vmath.vector3(12, -6, 0),
		vmath.vector3(-12, 6, 0),
		vmath.vector3(-15, 0, 0),
		vmath.vector3(-12, -6, 0),
	}

	if self.activate then
		go_controller.add(self)
		position_functions.go_set_perspective_z()
		--camera.follow(camera_id, msg.url(), options)
		local is_player = true
		live_bar.create(self, is_player)
	end

	self.max_live = self.live

	self.position_center_horde = go.get_position()
	--self.movement = vmath.vector(0)
	self.input = vmath.vector3(0)
	self.velocity = vmath.vector3(0)
	self.correction = vmath.vector3()

	self.visible_horde = self.visible_horde_min
	--self.distantion_visible = self.distantion_attack
	self.horde = {}
	self.zombies = {}

	-- Обзор для удара по противникам
	self.exclude_commands_attack = {}
	self.exclude_commands_attack[hash("building_ruin")] = true
	self.exclude_commands_attack[hash("zombie_enemy")] = true

	if self.horde_map then
		self.exclude_commands_attack[hash("humans")] = true
	end

	timer.delay(0.1, false, function (self)
		local сenter_position = vmath.vector3(0)
		local index_to_horde = self.horde_count
		horde.get_position(self, сenter_position, 250)

		for i = 1, index_to_horde do
			math.randomseed(i)
			local human_id = math.random(1, 9)
			horde.add_zombie_horde(self, self.skin_id, human_id)
		end

		timer.delay(self.speed_damage, true, function (self)
			if not self.move_stop then
				local visible_items = ai_vision.get_visible(self, self.visible_object_id, self.distantion_attack - 3, self.exclude_commands_attack)
				if visible_items and #visible_items > 0 then
					-- Есть враги
					character_attack.attack(self, visible_items[1].url)
				end
			end
		end)

		horde.move_horde_bot(self, go.get_position(), duration, dir)
	end)

	self.group_name = "visible_object"
	self.group_id, self.visible_object_id = ai_vision.add_dynamic_object(self, self.group_name)

	-- Обзор вокруг орды
	if not self.horde_map then
		self.timer_view_horde = timer.delay(0.25, true, function (self)
			local visible_items = ai_vision.get_visible(self, self.visible_object_id, self.visible_horde)
			local position = go.get_position()

			horde_attack.visible(self, visible_items)
		end)
	else
		
	end

	zone_infection.create(self)
	zone_infection.update_size(self, 5)

	-- Отслеживаем перемещение зомбика
	zone_infection.create(self)
	zone_infection.update_size(self, 5)

	-- Обработка перредвижения
	self.handle_move_item = function (self, position, position_to, duration, dir)
		-- Перемещение орды
		if not self.is_circle_horde then
			horde.move_horde_bot(self, position_to, duration, dir)
		end
		-- Перемещение зоны инфекции
		zone_infection.animate_position(self, position_to, duration)
		ai_zombie_main_enemy_horde.ai_handle_item_move(self)
	end

	horde.change_horde(self)

	ai_zombie_main_enemy_horde.behavior(self)
end

function final(self)
	go_controller.delete(self)
	msg.post(".", "release_input_focus")
end



function update(self, dt)
	if self.is_circle_horde then
		horde_circle.player_update(self, dt)
	end
end

function on_message(self, message_id, message, sender)
	character_zombie_main.on_message(self, message_id, message, sender)

	if message_id == hash("activate") then
		self.activate = true
		go_controller.add(self)
		position_functions.go_set_perspective_z()
		--camera.follow(camera_id, msg.url(), options)
		local is_player = true
		live_bar.create(self, is_player)

	elseif message_id == hash("kill_zombie") then
		local id_zombie = message.id_zombie
		local url_zombie = message.url_zombie

		if not id_zombie and url_zombie then
			for index, zombie in ipairs(self.horde) do
				if zombie.url.path == url_zombie.path then
					horde.delete_zombie_horde(self, index, true)
					break
				end
			end
		end

	elseif message_id == hash("damage") then
		-- Получили урон
		local damage = message.damage or 0
		self.from_id_object = message.from_id_object 
		self.live = self.live - damage

		character_animations.damage(self, message.parent or sender)

		live_bar.set_hp(self, self.live, self.max_live)

		if self.live <= 0 then
			local is_player = false
			character_zombie_main.killing(self, is_player)
		end

	elseif message_id == hash("contact_point_response") then
		-- СТолкновение с физическим объектом
		if message.distance > 0 then
			local proj = vmath.project(self.correction, message.normal * message.distance)
			if proj < 1 then
				local comp = (message.distance - message.distance * proj) * message.normal
				go.set_position(go.get_position() + comp)
				self.correction = self.correction + comp
			end
		end

	elseif message_id == hash("zombie_attack_death") then
		-- Атакуюющий зомбик умер
		local url = go_controller.url_object(sender)
		horde_attack.zombie_death(self, self.zombies[go_controller.url_to_key(url)])
		self.zombies[go_controller.url_to_key(url)] = nil

	elseif message_id == hash("zombie_ruin_target") then
		-- Зомбик уничтожил объект
		local key_target = go_controller.url_to_key(message.target)
		local key_zombie = go_controller.url_to_key(go_controller.url_object(sender))
		local zombie = self.zombies[key_zombie]
		
		horde_attack.add_zombie_min_target(self, zombie)
		--horde_attack.delete_target(self, key_target)

	elseif message_id == hash("create_zombie") then
		-- Создаём зомбика
		local position = message.position
		if position then
			local zombie = horde.add_zombie_attack(self, horde_index, position, target, message)
			horde_attack.add_zombie_min_target(self, zombie)
		end

	elseif message_id == hash("position_to") then
		ai_move.move_item(self, message.position_to, function (self)
			character_animations.play(self, "idle")
			msg.post(sender, "player_position_success")
		end)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
