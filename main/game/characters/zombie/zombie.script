go.property("damage", 1)
go.property("live", 10)
go.property("speed_damage", 0.25)
go.property("speed", 50)
go.property("distantion_visible", 30)
go.property("distantion_attack", 10)
go.property("command", hash("player"))
go.property("skin_id", 0)
go.property("human_id", 1)
go.property("parent", msg.url())
go.property("position_to", vmath.vector3())
go.property("target", msg.url())
go.property("type_object", hash("zombie_player"))
go.property("targets", 8)
go.property("target_dist", vmath.vector3(6, 0, 0))
go.property("target_useful", 2)

function init(self)
	go_controller.add(self)

	sprite.play_flipbook("#body", "zombie_"..self.skin_id.."_"..self.human_id .. "_default")
	position_functions.go_set_perspective_z()

	self.max_live = self.live
	label.set_text("#label", self.live .. "/"..self.max_live)

	self.input = vmath.vector3(0)
	self.velocity = vmath.vector3(0)
	self.correction = vmath.vector3()

	self.group_name = "visible_object"
	self.group_id, self.visible_object_id = ai_vision.add_dynamic_object(self, self.group_name)

	print("self.target", self.target, msg.url())
	-- Если нет цели
	if go_controller.url_to_key(self.target) == go_controller.url_to_key(msg.url()) then
		self.target = nil
	end

	if self.target then
		print(self.target)
		ai_zombie.condition_attack(self, self.target)
	else
		timer.delay(0.25, true, function (self, handle)
			local visible_items = ai_vision.get_visible(self, self.visible_object_id, self.distantion_visible)

			if visible_items and #visible_items > 0 and visible_items[1].url then
				ai_zombie.condition_attack(self, visible_items[1].url)
			end
		end)
	end

	print("self.post_target", self.target)

	

	

	
end

function final(self)
	go_controller.delete(self)
	msg.post(".", "release_input_focus")
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.debug_lines_to_target then
		draw.line(self.debug_lines_to_target.from, self.debug_lines_to_target.to)
	end

	if self.debug_lines_to_tile then
		--pprint(self.debug_lines_to_tile)
		for i, v in ipairs(self.debug_lines_to_tile) do
			draw.line(v.from, v.to)
		end
		
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("object_visible_kill") then
		-- Прицеливаемый объект уничтожен
		if self.target then
			ai_attack.delete_target(self, self.target)
			ai_zombie.clear_coditions(self)
		end

	elseif message_id == hash("damage") then
		pprint(message_id, message)
		-- Получили урон
		local damage = message.damage or 0
		self.from_id_object = message.from_id_object 
		self.live = self.live - damage

		label.set_text("#label", self.live .. "/"..self.max_live)

		--go.animate(".", "position", go.PLAYBACK_ONCE_PINGPONG, 1.1, go.EASING_OUTBACK, 0.25, 0)

		if self.live <= 0 then
			go.delete()
		end
	end
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
