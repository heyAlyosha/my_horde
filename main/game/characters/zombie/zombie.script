go.property("damage", 0.5)
go.property("live", 20)
go.property("speed_damage", 0.75)
go.property("speed", 60)
go.property("distantion_visible", 50)
go.property("distantion_attack", 10)
go.property("command", hash("player"))
go.property("skin_id", 0)
go.property("human_id", 1)
go.property("parent", msg.url())
go.property("position_to", vmath.vector3())
go.property("target", msg.url())
go.property("type_object", hash("zombie_dynamic"))
go.property("targets", 8)
go.property("target_dist", vmath.vector3(6, 0, 0))
go.property("target_useful", 2)
go.property("time_view", 0.5)
go.property("damage_blood", true)
go.property("visible_attack", false)
go.property("spawn_coins", 0)
go.property("spawn_resource", 0)
go.property("spawn_xp", 1)
go.property("spawn_star", 0)

function init(self)
	go_controller.object_items_spawn_to_map(self)

	go_controller.add(self)

	sprite.play_flipbook("#body", "zombie_"..self.skin_id.."_"..self.human_id .. "_default")
	position_functions.go_set_perspective_z()

	self.max_live = self.live

	self.input = vmath.vector3(0)
	self.velocity = vmath.vector3(0)
	self.correction = vmath.vector3()

	self.group_name = "visible_object"
	self.group_id, self.visible_object_id = ai_vision.add_dynamic_object(self, self.group_name)

	-- Если нет цели
	if go_controller.url_to_key(self.target) == go_controller.url_to_key(msg.url()) then
		self.target = nil
	end

	if self.target then
		-- 
		self.condition_ai = hash("to_target")
		ai_zombie.behavior(self)
	else
		self.condition_ai = nil
		ai_zombie.behavior(self)
	end
	
end

function final(self)
	go_controller.delete(self)

	-- Удаляем из орды, если была
	if go_controller.url_to_key(self.parent) ~= go_controller.url_to_key(msg.url()) and go_controller.is_object(self.parent) then
		msg.post(self.parent, "zombie_attack_death")
	end
end

--[[
function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.debug_lines_to_target then
		draw.line(self.debug_lines_to_target.from, self.debug_lines_to_target.to)
	end

	if self.debug_lines_to_tile then
		--pprint(self.debug_lines_to_tile)
		for i, v in ipairs(self.debug_lines_to_tile) do
			draw.line(v.from, v.to)
		end
	end
end
--]]

function on_message(self, message_id, message, sender)
	if message_id == hash("object_visible_kill") then
		-- Прицеливаемый объект уничтожен
		if self.target then
			--[[
			ai_attack.delete_target(self, self.target)
			ai_core.clear_coditions(self)

			ai_zombie.condition_to_horde(self)
			--]]
			self.target = nil
			ai_zombie.behavior(self)
		end

	elseif message_id == hash("damage") then
		character_damage.damage_zombie(self, message)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
