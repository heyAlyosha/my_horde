go.property("animate", true)

function init(self)
	self.urls = {
		shadow = "shadow#shadow"
	}

	self.positions_cloud = {}

	-- Затемнение
	go.set(self.urls.shadow, "tint.w", 0)

	-- Облака и грозы
	for i = 1, 3 do
		self.urls["cloud"..i] = "cloud"..i
		self.urls["cloud_sprite"..i] = "cloud"..i .. "#body"
		self.urls["lightning"..i] = "cloud"..i .. "#lightning"

		local url_cloud = self.urls["cloud"..i]
		local url_cloud_sprite = self.urls["cloud_sprite"..i]
		local url_lightning = self.urls["lightning"..i]

		-- Стартовое рамоложение
		self.positions_cloud[i] = go.get_position(url_cloud)

		-- Отключаем молнии и облака
		msg.post(url_lightning, "disable")
		go.set(url_cloud_sprite, "tint.w", 0)

		local position = go.get_position(url_cloud)

		-- Раздвигаем облака
		if i == 1 then
			position.x = position.x - 300
			go.set_position(position, url_cloud)
		elseif i == 3 then
			position.x = position.x + 300
			go.set_position(position, url_cloud)
		end
	end

	-- Анимация появления облаков
	self.delay_animation = 0.5
	self.duration = 0.25
	go.animate(self.urls.shadow, "tint.w", go.PLAYBACK_ONCE_FORWARD, 0.5, go.EASING_LINEAR, self.duration)

	timer.delay(self.delay_animation, false, function (self)
		for i = 1, 3 do
			local url_cloud = self.urls["cloud"..i]
			local url_cloud_sprite = self.urls["cloud_sprite"..i]

			go.animate(url_cloud, "position", go.PLAYBACK_ONCE_FORWARD, self.positions_cloud[i], go.EASING_OUTCUBIC, self.duration)
			go.animate(url_cloud_sprite, "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, self.duration)

			--Анимация плавания облаков
			timer.delay(self.duration, false, function (self)
				local position_y = self.positions_cloud[i].y
				if i == 1 then
					position_y = position_y + 5
				elseif i == 2 then
					position_y = position_y - 9
				else
					position_y = position_y - 5
				end
				go.animate(url_cloud, "position.y", go.PLAYBACK_LOOP_PINGPONG, position_y, go.EASING_LINEAR, 1)
			end)
		end
	end)

	-- Анимация грозы
	self.duration_lightning = 0.1
	self.timer_lightning = timer.delay(1, true, function (self)
		local lightning_sprite = {"lightning_2", "lightning_3"}
		for i = 1, 3 do
			math.randomseed(i)
			if math.random(0, 1) == 1 then
				local url_lightning = self.urls["lightning"..i]
				local url_cloud_sprite = self.urls["cloud_sprite"..i]
				local animation_id = lightning_sprite[math.random(1, 2)]
				msg.post(url_lightning, "enable")
				sprite.play_flipbook(url_lightning, animation_id)
				go.set(self.urls.shadow, "tint", vmath.vector4(0, 0, 0, 0.3))

				timer.delay(self.duration_lightning/2, false, function (self)
					if math.random(0, 1) == 1 then
						timer.delay(self.duration_lightning/2, false, function (self)
							if sprite == 1 then
								animation_id = lightning_sprite[2]
							else 
								animation_id = lightning_sprite[1]
							end

							sprite.play_flipbook(url_lightning, animation_id)

							timer.delay(self.duration_lightning/2, false, function (self)
								msg.post(url_lightning, "disable")
								go.set(self.urls.shadow, "tint", vmath.vector4(0, 0, 0, 0.5))
							end)
						end)
					else
						msg.post(url_lightning, "disable")
						go.set(self.urls.shadow, "tint", vmath.vector4(0, 0, 0, 0.5))
					end
				end)
			end
		end
	end)

	timer.delay(2, false, function (self)
		msg.post(".", "hidden")
	end)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end


function on_message(self, message_id, message, sender)
	if message_id == hash("hidden") then
		-- Скрытие анимации
		timer.cancel(self.timer_lightning)
		go.animate(self.urls.shadow, "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, self.duration)

		-- Скрытие облаков
		for i = 1, 3 do
			local url_cloud = self.urls["cloud"..i]
			local url_cloud_sprite = self.urls["cloud_sprite"..i]

			go.animate(url_cloud_sprite, "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, self.duration)

			local position_x = self.positions_cloud[i].x
			if i == 1 then
				go.animate(url_cloud, "position.x", go.PLAYBACK_ONCE_FORWARD, position_x - 300, go.EASING_LINEAR, self.duration)
			elseif i == 3 then
				go.animate(url_cloud, "position.x", go.PLAYBACK_ONCE_FORWARD, position_x + 300, go.EASING_LINEAR, self.duration)
			end

			timer.delay(self.duration, false, function (self)
				--Удаление
				go.delete()
			end)
		end
	end
end


function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
