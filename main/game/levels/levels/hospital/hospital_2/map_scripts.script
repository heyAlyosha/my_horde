-- Скрипты для карты
function init(self)
	-- Объекты для активации
	self.activation_objects = {}

	msg.post(".", "init")

	msg.post(".", "start")
	--msg.post(".", "get_ruin_door")
	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	levels_script_functions.on_update(self)
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("init") then
		-- Инициализация карты
		camera.follow(camera_id, msg.url("player"), options)

	elseif message_id == hash("start") then
		-- Игрок идёт до стартовой точки уровня
		local position_to = go.get_position("start_point")
		position_to = position_functions.add_perspective_z(position_to)
		msg.post("player", "position_to", {position_to = position_to})

	elseif message_id == hash("player_position_success") then
		-- Игрок дошёл, активируем его
		msg.post("player", "activate")

	elseif message_id == hash("get_ruin_door") then
		-- Уничтожить дверь и тумбы
		timer_linear.add(self, "start", 1, function (self)
			local goals = {}
			for i, object in ipairs(self.objects_start) do
				goals[i] = msg.url(factory.create(object.factory_id, go.get_position(object.plug_id)))
				go.delete(object.plug_id)
			end

			levels_script_functions.add_goal_ruins(self, goals, function (self)
				--msg.post(".", "get_ruin_door")
			end)
		end, delay)

	elseif message_id == hash("add_activation_object") then
		-- Добавляем объект в активацию
		local id_activation = message.id_activation
		self.activation_objects[id_activation] = self.activation_objects[id_activation] or {}
		table.insert(self.activation_objects[id_activation], sender)

	elseif message_id == hash("activation_point") then
		-- Активация объектов по поинту
		local id_activation = message.id_activation
		if self.activation_objects[id_activation] then
			for i, url in ipairs(self.activation_objects[id_activation]) do
				msg.post(url, "activation")
			end
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
