-- Обучение в игре
local lang_core = require "main.lang.lang_core"
local storage_gui = require "main.storage.storage_gui"
local storage_player = require "main.storage.storage_player"
local study_functions = require "main.game.study.modules.study_functions"
local storage_game = require "main.game.storage.storage_game"

function init(self)
	self.current_study_id = nil
	self.items_study = {}
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if self.current_study_id then
		study_functions.on_message_type(self, message_id, message, sender)
	end

	--pprint("study", message_id, message)

	if message_id == hash("play_first_item") then
		study_functions.play_first_item(self)

	elseif message_id == hash("event") then
		if message.id == "result_all_showing" then
			if not self.current_study_id and storage_game.game.study_level then
				if not storage_player.study.reward_visit then
					-- Если не было про награду каждый день
					msg.post("/loader_gui", "visible", {
						id = "modal_reward_visit",
						visible = true,
						value = {day = storage_player.day_to_game, study = true},
						type = hash("animated_close"),
					})
				else
					study_functions.clear_prev_items(self)

					local id_help = "continue_level"
					local is_not_set = true
					study_functions.add_item(self, id_help, is_not_set)
				end
			end

		elseif message.id == "visible_gui" and message.component_id == "scale_power" then
			-- ОКНО ВРАЩЕНИЯ БАРАБАНА --
			-- Прицел 
			id_help = "aim"
			if study_functions.is_show_help(self, id_help) then
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

			-- Про звёзды
			id_help = "stars"
			if study_functions.is_show_help(self, id_help) and storage_game.game.round.is_stars then
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

			-- Противник поставил ловушку
			id_help = "sector_trap"
			if study_functions.is_show_help(self, id_help) then
				for k, sector in pairs(storage_game.wheel) do
					if sector.player_id ~= "player" and (sector.artifact_id == "trap_1" or sector.artifact_id == "trap_2" or sector.artifact_id == "trap_3") then
						study_functions.clear_prev_items(self)
						study_functions.add_item(self, id_help)
						return true
					end
				end
			end

			-- Противник захватил несколько секторов
			id_help = "sector_catch"
			if study_functions.is_show_help(self, id_help) then
				for k, sector in pairs(storage_game.wheel) do
					if sector.player_id ~= "player" and (sector.artifact_id == "catch_1" or sector.artifact_id == "catch_2" or sector.artifact_id == "catch_3") then
						study_functions.clear_prev_items(self)
						study_functions.add_item(self, id_help)
						return true
					end
				end
			end

		elseif message.id == "visible_gui" and message.component_id == "game_hud_buff_horisontal" then
			-- ОКНО ЗАХВАТА 
			-- Про звхват
			id_help = "catch"
			if study_functions.is_show_help(self, id_help) then
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
			end

			-- Увеличение точности
			id_help = "accuracy"
			if study_functions.is_show_help(self, id_help) then
				study_functions.add_item(self, id_help)
				return true
			end

			-- Увеличение реакции
			id_help = "speed_caret"
			if study_functions.is_show_help(self, id_help) then
				study_functions.add_item(self, id_help)
				return true
			end

			local open_symbol = 0
			for i, v in ipairs(storage_game.game.round.tablo) do
				if v.open and v.symbol ~= "_" then
					open_symbol = open_symbol + 1
				end
			end
			-- Газировка
			id_help = "bank"
			if study_functions.is_show_help(self, id_help) and open_symbol == 0 then
				-- Если не открыты буквы
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end
			-- Сувенир
			id_help = "artifact_trap"
			if study_functions.is_show_help(self, id_help) and open_symbol < 2 then
				-- Если не открыты буквы
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

			-- Сувенир
			id_help = "artifact_catch"
			if study_functions.is_show_help(self, id_help) and open_symbol < 2 then
				-- Если не открыты буквы
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

		elseif message.id == "visible_gui" and message.component_id == "catalog_company" then
			-- Компании
			timer.delay(0.3, false, function (self)
				local id_help = "company"
				if study_functions.is_show_help(self, id_help) and not self.current_study_id then
					-- Если не открыты буквы
					study_functions.clear_prev_items(self)
					study_functions.add_item(self, id_help)
					return true
				end
			end)

		elseif message.id == "visible_gui" and message.component_id == "keyboard_ru" and message.value  and message.value.type == "game" and message.value.is_player  then
			-- Выбор буквы
			local id_help = "keyboard"
			if study_functions.is_show_help(self, id_help) then
				-- Если не открыты буквы
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

		elseif message.id == "visible_gui" and message.component_id == "modal_obereg" then
			-- Сувенир
			local id_help = "obereg"
			if study_functions.is_show_help(self, id_help) then
				-- Если не открыты буквы
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

		elseif message.id == "visible_gui" and message.component_id == "modal_characteristics"  then
			-- Улучшения
			local id_help = "level_up"
			if study_functions.is_show_help(self, id_help) and storage_player.characteristic_points > 0  then
				-- Если не открыты буквы
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

		elseif message.id == "visible_gui" and message.component_id == "catalog_prize_magazine"  then
			-- Магазин призов
			local id_help = "shop_prizes"
			if study_functions.is_show_help(self, id_help) then
				-- Если не открыты буквы
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

		elseif message.id == "visible_gui" and message.component_id == "catalog_inventary"  then
			-- Инвентарь
			local id_help = "inventary"
			if study_functions.is_show_help(self, id_help) then
				timer.delay(0.1, false, function (self)
					study_functions.clear_prev_items(self)
					study_functions.add_item(self, id_help)
				end)
				return true
			end

		elseif message.id == "visible_gui" and message.component_id == "catalog_shop" then
			-- Магазин
			local id_help = "shop"
			if study_functions.is_show_help(self, id_help) then
				timer.delay(0.1, false, function (self)
					study_functions.clear_prev_items(self)
					study_functions.add_item(self, id_help)
				end)
				
				return true
			end

		elseif message.id == "shop_no_product" and (not self.current_study_id or self.current_study_id == "shop") then
			-- Закончились товары
			local id_help = "shop_no_product"
			if study_functions.is_show_help(self, id_help) then
				self.current_study_id = nil
				self.shop_no_product = message.item_id
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

		elseif message.id == "shop_no_gold" and (not self.current_study_id or self.current_study_id == "shop") then
			-- Закончились монеты
			local id_help = "shop_no_gold"
			if study_functions.is_show_help(self, id_help) then
				self.current_study_id = nil
				self.shop_no_gold = message.item_id
				study_functions.clear_prev_items(self)
				study_functions.add_item(self, id_help)
				return true
			end

		elseif message.id == "open_shop_for_games" then
			local id_help = "shop_for_game"
			timer.delay(0.2, false, function (self)
				if study_functions.is_show_help(self, id_help) and not study_functions.is_show_help(self, "shop") and not self.current_study_id then
					study_functions.clear_prev_items(self)
					study_functions.add_item(self, id_help)
					return true
				end
			end)

		elseif message.id == "open_reward_days" then
			local id_help = "reward_visit"
			timer.delay(0.2, false, function (self)
				if study_functions.is_show_help(self, id_help) and not self.current_study_id then
					study_functions.clear_prev_items(self)
					local no_hello = true
					study_functions.add_item(self, id_help, is_not_set, no_hello)
					return true
				end
			end)
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
