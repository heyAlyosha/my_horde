local druid = require("druid.druid")
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local gui_animate = require "main.gui.modules.gui_animate"
local modal_result_family_render = require "main.gui.modals.modal_result_family.modules.modal_result_family_render"
local modal_result_family_btns = require "main.gui.modals.modal_result_family.modules.modal_result_family_btns"
local gui_manager = require "main.gui.modules.gui_manager"
local gui_render = require "main.gui.modules.gui_render"
local gui_size = require 'main.gui.modules.gui_size'
local timer_linear = require "main.modules.timer_linear"
-- Адаптирвоанный интерфейс
local gui_loyouts = require "main.gui.modules.gui_loyouts"
-- Переводы
local gui_lang = require "main.lang.gui_lang"
local lang_core = require "main.lang.lang_core"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(3)
	gui_manager.add_screen("modal_result_family", msg.url())
	self.id = "modal_result_family"

	self.nodes = {
		wrap = gui.get_node("wrap"),
		title = gui.get_node("title"),
		title_wrap = gui.get_node("title_wrap"),

		wrap_win = gui.get_node("wrap_win"),

		win_title = gui.get_node("win_title"),
		win_player_avatar = gui.get_node("win_player_template/avatar"),
		win_player_name = gui.get_node("win_player_template/name"),

		wrap_players = gui.get_node('wrap_players'),
		rating_title = gui.get_node('rating_title'),

		btn_close = gui.get_node("btn-close-template/btn"),
		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),

		btns_win = gui.get_node("btns_win"),
		btn_win_back = gui.get_node("btn_win_back_template/btn"),
		btn_win_back_icon = gui.get_node("btn_win_back_template/btn_icon"),
		btn_win_continue = gui.get_node("btn_win_continue_template/btn"),
		btn_win_continue_icon = gui.get_node("btn_win_continue_template/btn_icon"),
		btn_win_home = gui.get_node("btn_win_home_template/btn"),
		btn_win_home_icon = gui.get_node("btn_win_home_template/btn_icon"),
	}

	self.btns = {
		{id = "close", type = "btn", section = "close", node = self.nodes.btn_close, wrap_node = self.nodes.btn_close_icon, node_title = false, icon = "btn_circle_bg_red_", wrap_icon = "btn_icon_close_"},
		{id = "back", type = "btn", section = "body", node = self.nodes.btn_win_back, wrap_node = self.nodes.btn_win_back_icon, node_title = false, icon = "btn_circle_bg_orange_", wrap_icon = "btn_icon_back_"},
		{id = "continue_family", type = "btn", section = "body", node = self.nodes.btn_win_continue, wrap_node = self.nodes.btn_win_continue_icon, node_title = false, icon = "btn_circle_bg_green_", wrap_icon = "btn_icon_play_"},
		{id = "home", type = "btn", section = "body", node = self.nodes.btn_win_home, wrap_node = self.nodes.btn_win_home_icon, node_title = false, icon = "btn_circle_bg_orange_", wrap_icon = "btn_icon_home_"},
	}

	self.druid = druid.new(self)

	msg.post("main:/core_screens", "game_result", {type = "family"})
end

function final(self)
	gui_manager.remove_screen("modal_result_family", msg.url())
	self.druid:final()
	gui_input.on_final(self)
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	
	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("layout_changed") then
		gui_input.render_btns(self, self.btns)

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") then
		-- Показываем окно
		self.data = message.value
		gui_animate.show_bottom(self, self.nodes.wrap , nil)

		modal_result_family_render.all(self)
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	if timer_linear.on_input(self, action_id, action) or self.blocking_btn then
		return true
	end

	if self.focus_btn_id == 1 and action_id == hash("up") and action.pressed then
		msg.post(storage_gui.components_visible.interface, "focus", {focus = 1})

		msg.post("main:/sound", "play", {sound_id = "focus_main_menu"})
		return true
	end

	self.druid:on_input(action_id, action)

	return gui_input.on_input(self, action_id, action, function_focus, modal_result_family_btns.function_activate, modal_result_family_btns.function_back, function_post_focus)
end

function on_reload(self)

end
