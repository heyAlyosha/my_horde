local druid = require("druid.druid")
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local storage_game = require "main.game.storage.storage_game"
local gui_animate = require "main.gui.modules.gui_animate"
local modal_result_render = require "main.gui.modals.modal_result.modules.modal_result_render"
local modal_result_single_tournir = require "main.gui.modals.modal_result.modules.modal_result_single_tournir"
local modal_result_single_btns = require "main.gui.modals.modal_result.modules.modal_result_single_btns"
local gui_manager = require "main.gui.modules.gui_manager"
local game_content_levels = require "main.game.content.game_content_levels"
local gui_render = require "main.gui.modules.gui_render"
local gui_size = require 'main.gui.modules.gui_size'
local timer_linear = require "main.modules.timer_linear"
-- Адаптирвоанный интерфейс
local gui_loyouts = require "main.gui.modules.gui_loyouts"
-- Переводы
local gui_lang = require "main.lang.gui_lang"
local lang_core = require "main.lang.lang_core"
local live_update_atlas = require "main.game.live_update.atlas.live_update_atlas"
local core_layouts = require "main.core.core_layouts"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(3)
	if true then
		--return
	end
	gui_manager.add_screen("modal_result", msg.url())
	self.id = "modal_result"

	self.nodes = {
		wrap = gui.get_node("wrap"),
		title_wrap = gui.get_node("title_wrap"),
		wrap_btns_win = gui.get_node("wrap_btns_win"),
		wrap_btns_fail = gui.get_node("wrap_btns_fail"),
		wrap_trophy = gui.get_node("wrap_trophy"),
		title = gui.get_node("title"),
		prize_title = gui.get_node("prize_title"),
	}

	self.btns = {
		--{id = "close", type = "btn", section = "close", node = self.nodes.btn_close, wrap_node = self.nodes.btn_close_icon, node_title = false, icon = "btn_circle_bg_red_", wrap_icon = "btn_icon_close_",}
	}

	self.druid = druid.new(self)
end

function final(self)
	gui_manager.remove_screen("modal_result_single", msg.url())
	self.druid:final()
	gui_input.on_final(self)
	storage_game.game.study = nil
	live_update_atlas.on_final_gui(self)

	core_layouts.clear_data()
end

--[[
function update(self, dt)
	self.druid:update(dt)

	for i, btn in ipairs(self.btns) do
		storage_gui.positions[self.id] = storage_gui.positions[self.id] or {}
		storage_gui.positions[self.id]["btn_"..i] = gui.get_screen_position(btn.node or btn.wrap_node)
	end
end
--]]

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	live_update_atlas.on_message_gui(self, message_id, message, sender)

	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("layout_changed") then
		gui_input.render_btns(self, self.btns)

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") then
		-- Показываем окно
		self.data = message.value
		modal_result_render.visible(self, self.data)

	elseif message.type == "login" then
		modal_result_single_btns.render_login_btn(self)

	elseif message_id == hash("event") and message.id == "close_gui" and message.component_id == "inventary_wrap" then
		if self.help_shop then
			-- Если было открыто напоминание про магазин и теперь оно закрывается, запускаем игру
			local focus_btn_id = 3
			modal_result_single_btns.function_activate(self, focus_btn_id)
		end

	elseif message_id == hash("event") and message.id == "visible_gui" and message.component_id == "inventary_wrap" then
		if not self.help_shop then
			-- Если просто открывается инвентарь
			-- блокируем запуск напоминания про магазин
			self.open_shop =  true
			
		end

	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	if timer_linear.on_input(self, action_id, action) then
		return true
	end

	if self.focus_btn_id and self.btns[self.focus_btn_id].section == "body" and action_id == hash("up") and action.pressed then
		msg.post(storage_gui.components_visible.interface, "focus", {focus = 1})

		msg.post("main:/sound", "play", {sound_id = "focus_main_menu"})
		return true
	end

	self.druid:on_input(action_id, action)

	return gui_input.on_input(self, action_id, action, function_focus, modal_result_single_btns.function_activate, modal_result_single_btns.function_back, function_post_focus)
end

function on_reload(self)

end
