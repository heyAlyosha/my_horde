local druid = require("druid.druid")
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local storage_game = require "main.game.storage.storage_game"
local gui_animate = require "main.gui.modules.gui_animate"
local modal_result_single_animations = require "main.gui.modals.modal_result_single.animations.modal_result_single_animations"
local modal_result_single_animate_win = require "main.gui.modals.modal_result_single.animations.modal_result_single_animate_win"
local modal_result_single_win = require "main.gui.modals.modal_result_single.modules.modal_result_single_win"
local modal_result_single_fail = require "main.gui.modals.modal_result_single.modules.modal_result_single_fail"
local modal_result_single_tournir = require "main.gui.modals.modal_result_single.modules.modal_result_single_tournir"
local modal_result_single_btns = require "main.gui.modals.modal_result_single.modules.modal_result_single_btns"
local gui_manager = require "main.gui.modules.gui_manager"
local game_content_levels = require "main.game.content.game_content_levels"
local gui_render = require "main.gui.modules.gui_render"
local gui_size = require 'main.gui.modules.gui_size'
local timer_linear = require "main.modules.timer_linear"
-- Адаптирвоанный интерфейс
local gui_loyouts = require "main.gui.modules.gui_loyouts"
-- Переводы
local gui_lang = require "main.lang.gui_lang"
local lang_core = require "main.lang.lang_core"
local live_update_atlas = require "main.game.live_update.atlas.live_update_atlas"
local core_layouts = require "main.core.core_layouts"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(3)
	if true then
		return
	end
	gui_manager.add_screen("modal_result_single", msg.url())
	self.id = "modal_result_single"

	self.nodes = {
		wrap = gui.get_node("wrap"),
		title = gui.get_node("title"),
		title_wrap = gui.get_node("title_wrap"),
		prize_title = gui.get_node("prize_title"),
		wrap_fail = gui.get_node("wrap_fail"),
		wrap_win = gui.get_node("wrap_win"),
		wrap_tournir = gui.get_node("wrap_tournir"),

		fail_bg = gui.get_node('fail_bg'),
		win_bg = gui.get_node('win_bg'),

		company_card_wrap = gui.get_node('company_success_template/wrap'),
		current_level_card_wrap = gui.get_node('current_level_template/wrap'),
		next_level_card_wrap = gui.get_node('next_level_template/wrap'),

		btn_close = gui.get_node("btn-close-template/btn"),
		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),

		fail_level_card_wrap = gui.get_node('fail_level_template/wrap'),
		fail_next_level_card_wrap = gui.get_node('fail_next_level_template/wrap'),
		fail_description = gui.get_node('description'),
		fail_description_wrap = gui.get_node('description_wrap'),
		btns_fail = gui.get_node('btns_fail'),
		btn_fail_back = gui.get_node("btn_fail_back_template/btn"),
		btn_fail_back_icon = gui.get_node("btn_fail_back_template/btn_icon"),
		btn_fail_refresh = gui.get_node("btn_fail_refresh_template/btn"),
		btn_fail_refresh_icon = gui.get_node("btn_fail_refresh_template/btn_icon"),
		btn_fail_home = gui.get_node("btn_fail_home_template/btn"),
		btn_fail_home_icon = gui.get_node("btn_fail_home_template/btn_icon"),
		arrow_wrap_fail = gui.get_node("fail_arrow_wrap"),

		win_level_card_wrap = gui.get_node('current_level_template/wrap'),
		win_next_level_card_wrap = gui.get_node('next_level_template/wrap'),
		prize_wrap = gui.get_node('prize_wrap'),
		prize_title = gui.get_node('prize_title'),
		lock_wrap = gui.get_node("next_level_template/lock_wrap_template/lock_wrap"),
		btns_win = gui.get_node("btns_win"),
		btn_win_back = gui.get_node("btn_win_back_template/btn"),
		btn_win_back_icon = gui.get_node("btn_win_back_template/btn_icon"),
		btn_win_continue = gui.get_node("btn_win_continue_template/btn"),
		btn_win_continue_icon = gui.get_node("btn_win_continue_template/btn_icon"),
		btn_win_refresh = gui.get_node("btn_win_refresh_template/btn"),
		btn_win_refresh_icon = gui.get_node("btn_win_refresh_template/btn_icon"),

		arrow_wrap = gui.get_node("arrow_wrap"),
		arrow_title = gui.get_node("level_title"),
		arrow = gui.get_node("arrow"),
		success_icon = gui.get_node("current_level_template/success_wrap_template/success_wrap"),

		wrap_opponents = gui.get_node("wrap_opponents"),
		opponent_tournir_1_avatar = gui.get_node("opponent_1_template/avatar"),
		opponent_tournir_1_name = gui.get_node("opponent_1_template/name"),
		opponent_tournir_2_avatar = gui.get_node("opponent_2_template/avatar"),
		opponent_tournir_2_name = gui.get_node("opponent_2_template/name"),

		login_wrap = gui.get_node("login_wrap"),
		login_description = gui.get_node("login_description"),
		btn_login_wrap = gui.get_node("btn_login_template/btn_wrap"),
		btn_login_title = gui.get_node("btn_login_template/btn_title"),
	}

	self.btns = {
		{id = "close", type = "btn", section = "close", node = self.nodes.btn_close, wrap_node = self.nodes.btn_close_icon, node_title = false, icon = "btn_circle_bg_red_", wrap_icon = "btn_icon_close_",}
	}

	self.druid = druid.new(self)
end

function final(self)
	gui_manager.remove_screen("modal_result_single", msg.url())
	self.druid:final()
	gui_input.on_final(self)
	storage_game.game.study = nil
	live_update_atlas.on_final_gui(self)

	core_layouts.clear_data()
end

--[[
function update(self, dt)
	self.druid:update(dt)

	for i, btn in ipairs(self.btns) do
		storage_gui.positions[self.id] = storage_gui.positions[self.id] or {}
		storage_gui.positions[self.id]["btn_"..i] = gui.get_screen_position(btn.node or btn.wrap_node)
	end
end
--]]

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	live_update_atlas.on_message_gui(self, message_id, message, sender)

	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("layout_changed") then
		gui_input.render_btns(self, self.btns)

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") then
		-- Показываем окно
		self.data = message.value
		gui_animate.show_bottom(self, self.nodes.wrap , nil)

		if self.data.current_level then
			self.level_id = self.data.current_level.id
			self.company_id = self.data.current_level.category_id
		end

		if not self.data.current_level then
			self.type_modal = "tournir"
			-- Турнир
			modal_result_single_tournir.start(self, self.data)

		elseif self.data.type_result == 'win' then
			self.type_modal = "win"
			-- Если это окно победы
			modal_result_single_win.start(self, self.data)
		else
			self.type_modal = "defeat"
			modal_result_single_fail.start(self, self.data)
		end

	elseif message.type == "login" then
		modal_result_single_btns.render_login_btn(self)

	elseif message_id == hash("event") and message.id == "close_gui" and message.component_id == "inventary_wrap" then
		if self.help_shop then
			-- Если было открыто напоминание про магазин и теперь оно закрывается, запускаем игру
			local focus_btn_id = 3
			modal_result_single_btns.function_activate(self, focus_btn_id)
		end

	elseif message_id == hash("event") and message.id == "visible_gui" and message.component_id == "inventary_wrap" then
		if not self.help_shop then
			-- Если просто открывается инвентарь
			-- блокируем запуск напоминания про магазин
			self.open_shop =  true
			
		end

	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	if timer_linear.on_input(self, action_id, action) then
		return true
	end

	if self.focus_btn_id == 1 and action_id == hash("up") and action.pressed then
		msg.post(storage_gui.components_visible.interface, "focus", {focus = 1})

		msg.post("main:/sound", "play", {sound_id = "focus_main_menu"})
		return true
	end

	self.druid:on_input(action_id, action)

	return gui_input.on_input(self, action_id, action, function_focus, modal_result_single_btns.function_activate, modal_result_single_btns.function_back, function_post_focus)
end

function on_reload(self)

end
