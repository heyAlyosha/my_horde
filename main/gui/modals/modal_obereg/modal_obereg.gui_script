local druid = require("druid.druid")
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local storage_player = require "main.storage.storage_player"
local gui_animate = require "main.gui.modules.gui_animate"
local modal_obereg_functions = require "main.gui.modals.modal_obereg.modules.modal_obereg_functions"
local gui_manager = require "main.gui.modules.gui_manager"
local gui_scale = require "main.gui.modules.gui_scale"
local gui_size = require 'main.gui.modules.gui_size'
local api_player = require 'main.game.api.api_player'
local color = require("color-lib.color")
local game_content_text = require "main.game.content.game_content_text"
local gui_lang = require "main.lang.gui_lang"
local lang_core = require "main.lang.lang_core"
local gui_loyouts = require "main.gui.modules.gui_loyouts"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(5)
	gui_manager.add_screen("modal_obereg", msg.url())
	self.id = "modal_obereg"

	self.nodes = {
		wrap = gui.get_node("wrap"),
		title = gui.get_node("title"),
		wrap_object = gui.get_node("wrap_object"),
		count = gui.get_node("count"),
		icon = gui.get_node("icon"),
		content = gui.get_node("content"),
		wrap_areola = gui.get_node("areola_template/wrap"),
		wrap_btns = gui.get_node("wrap_btns"),
		wrap_image = gui.get_node("image_wrap"),
		btn_confirm = gui.get_node("btn_confirm_template/btn_wrap"),
		btn_confirm_title = gui.get_node("btn_confirm_template/btn_title"),
		btn_reward = gui.get_node("btn_reward_template/btn"),
		btn_reward_icon = gui.get_node("btn_reward_template/btn_icon"),
		btn_close = gui.get_node("btn_skip_template/btn_wrap"),
		btn_close_title = gui.get_node("btn_skip_template/btn_title"),
	}

	gui_lang.set_text_upper(self, self.nodes.title, "_use_obereg", before_str, after_str)
	gui_lang.set_text_upper(self, self.nodes.btn_confirm_title, "_use", before_str, after_str)
	gui_lang.set_text_upper(self, self.nodes.btn_close_title, "_no", before_str, after_str)

	--gui_animate.show_bottom(self, self.nodes.wrap , nil)
	self.druid = druid.new(self)

	-- Кнопка просмотра рекламы
	self.btn_reward = {
		id = "reward", 
		type = "btn", 
		section = "body", 
		node = self.nodes.btn_reward, 
		--wrap_node =  self.nodes.btn_reward_icon,
		icon = "btn_ellipse_green_", 
		--wrap_icon = "btn_icon_home_"
	}

	-- Кнопка согласия
	self.btn_confirm = {
		id = "confirm", 
		type = "btn", 
		section = "body", 
		node = self.nodes.btn_confirm,
		node_title = self.nodes.btn_confirm_title, 
		icon = "btn_ellipse_green_"
	}

	self.btns = {
		-- Кнопка закрытия
		{
			id = "close", 
			type = "btn", 
			section = "body", 
			node = self.nodes.btn_close,
			node_title = self.nodes.btn_close_title, 
			icon = "btn_ellipse_red_"
		},
	}

	-- Контент для разных типов оберегов
	self.types = {
		skipping = "_obereg_skipping",
		bankrupt = "_obereg_bankrupt",
		trap_skip = "_obereg_trap_skip",
		trap_default = "_obereg_trap_default",
	}
end

function final(self)
	msg.post("/loader_gui", "visible", {
		id = "bg",
		visible = false,
		parent_id = self.id,
		type = hash("animated_close"),
	})

	msg.post("game-room:/core_game", "event", {id = "obereg", confirm = self.success, type = self.type})

	gui_manager.remove_screen(self.id, msg.url())
	gui_input.on_final(self)
	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)

	-- Запоминаем место кнопки
	storage_gui.positions[self.id] = storage_gui.positions[self.id] or {}
	storage_gui.positions[self.id].btn = gui.get_screen_position(self.nodes.btn_confirm)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)

	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") then
		-- Показываем окно
		self.data = message.value
		
		self.type = message.type
		gui_animate.show_bottom(self, self.nodes.wrap , nil)

		modal_obereg_functions.visible(self, self.type, self.data)

	elseif message_id == hash("hidden") then
		gui_animate.hidden_bottom(self, self.nodes.wrap, function (self)
			msg.post("/loader_gui", "visible", {
				id = "modal_obereg",
				visible = false,
			})
		end)

	-- Пришло сообщение
	elseif message_id == hash("set_status") then
		if message.type == "confirm" or message.type == "success" then
			modal_obereg_functions.success(self)

		elseif message.type == "update" then
			-- Обновляем контент
			modal_obereg_functions.visible(self, self.type, self.data)
		end

	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	if storage_gui.components_visible.modal_pause then
		return true
	end

	self.druid:on_input(action_id, action)

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		local btn = self.btns[focus_btn_id]

		-- Кнопка заблокирована
		if btn.disabled or self.disabled then
			return false
		end

		local node = btn.node or btn.wrap_node or btn.node_bg
		gui_animate.activate(self, node)

		if btn.id == "close" then
			gui_animate.hidden_bottom(self, self.nodes.wrap, function (self)
				msg.post("/loader_gui", "visible", {
					id = "modal_obereg",
					visible = false,
					type = hash("animated_close")
				})
			end)

		elseif btn.id == "reward" or btn.id == "confirm" then

			msg.post("/loader_gui", "set_status", {
				id = "modal_obereg",
				type = "success"
			})

			if btn.id == "reward" then

			elseif btn.id == "confirm" then

			end

			gui_input.set_disabled(self, self.btns[1], true)

			if self.animate_btn then
				self.animate_btn.stop(self)
				self.animate_btn = nil
			end

		end
	end

	if action_id == hash("action") and  action.pressed then
		function_activate(self, 1)
		return false

	elseif action_id == hash("up") and action.pressed then
		msg.post("/loader_gui", "focus", {
			id = "interface", -- id компонента в лоадер гуи
			focus = 1 -- кнопка фокуса
		})

		msg.post("main:/sound", "play", {sound_id = "focus_main_menu"})

		return 

	elseif self.disabled then
		return false
	end

	local function function_back(self)
		gui_animate.hidden_bottom(self, self.nodes.wrap, function (self)
			msg.post("/loader_gui", "visible", {
				id = "modal_obereg",
				visible = false,
				type = hash("animated_close")
			})
		end)
	end

	return gui_input.on_input(self, action_id, action, function_focus, function_activate, function_back, function_post_focus)
end

function on_reload(self)

end
