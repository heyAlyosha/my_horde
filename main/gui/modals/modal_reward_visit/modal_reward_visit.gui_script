local druid = require("druid.druid")
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local storage_player = require "main.storage.storage_player"
local gui_animate = require "main.gui.modules.gui_animate"
local modal_reward_visit_functions = require "main.gui.modals.modal_reward_visit.modules.modal_reward_visit_functions"
local gui_manager = require "main.gui.modules.gui_manager"
local gui_scale = require "main.gui.modules.gui_scale"
local gui_size = require 'main.gui.modules.gui_size'
local api_player = require 'main.game.api.api_player'
local color = require("color-lib.color")

local gui_loyouts = require "main.gui.modules.gui_loyouts"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(storage_gui.orders.modal)
	gui_manager.add_screen("modal_reward_visit", msg.url())

	self.disabled = true
	self.is_modal = true

	self.nodes = {
		wrap = gui.get_node("wrap"),
		title = gui.get_node("title"),
		content = gui.get_node("content"),
		wrap_btns = gui.get_node("wrap_btns"),
		wrap_gifts = gui.get_node("wrap_gifts"),
		respawn  = gui.get_node("respawn"),
		gift_target  = gui.get_node("gift_target"),

		prev_gift = {
			wrap = gui.get_node("gift_prev_template/wrap"),
			title = gui.get_node("gift_prev_template/title"),
			day = gui.get_node("gift_prev_template/day"),
		},

		current_gift = {
			wrap = gui.get_node("gift_current_template/wrap"),
			title = gui.get_node("gift_current_template/title"),
			day = gui.get_node("gift_current_template/day"),
			gold  = gui.get_node("gift_current_template/gift_gold"),
		},

		next_gift = {
			wrap = gui.get_node("gift_next_template/wrap"),
			title = gui.get_node("gift_next_template/title"),
			day = gui.get_node("gift_next_template/day"),
		},
		
		btn_confirm = gui.get_node("btn_confirm_template/btn_wrap"),
		btn_confirm_title = gui.get_node("btn_confirm_template/btn_title"),
	}

	--gui_animate.show_bottom(self, self.nodes.wrap , nil)
	self.druid = druid.new(self)

	self.btns = {
		{
			id = "close", 
			type = "btn", 
			section = "body", 
			node = self.nodes.btn_confirm,
			node_title = self.nodes.btn_confirm_title, 
			icon = "btn_ellipse_green_"
		}
	}

	storage_player.add_reward_visit = true

end

function final(self)
	gui_manager.remove_screen("modal_settings", msg.url())
	self.druid:final()
	gui_input.on_final(self)

	--[[
	if storage_player.created then
		-- ЕСли игрок только создан - запускаем обучение
		msg.post("game-room:/core_game", "start_study", {})
	end
	--]]
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)

	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") then
		-- Показываем окно
		local data = message.value
		self.study = data.study
		gui_animate.show_bottom(self, self.nodes.wrap , nil)
		modal_reward_visit_functions.visible(self, type, data)
		msg.post("/loader_gui", "visible", {
			id = "notify", visible = false
		})

	elseif message_id == hash("hidden") then
		gui_animate.hidden_bottom(self, self.nodes.wrap, function (self)
			msg.post("/loader_gui", "visible", {
				id = "modal_reward_visit",
				visible = false,
			})
		end)

	-- Пришло сообщение
	elseif message_id == hash("set_status") then
		if message.type == "confirm" or message.type == "success" then
			modal_reward_visit_functions.success(self)

		elseif message.type == "stack_success" then
			timer.delay(1.5, false, function (self)
				msg.post("main:/sound", "play", {sound_id = "game_result_trophys_1"})
				timer.delay(0.5, false, function (self)
					msg.post("main:/sound", "play", {sound_id = "game_result_trophys_1"})
				end)
			end)
			gui_animate.show_elem_popping(self, self.nodes.current_gift.title, 0.25, 1.5, function (self)
				
				gui_animate.show_elem_popping(self, self.nodes.btn_confirm, 0.25, 0.25, function (self)
					self.disabled = false
					gui_input.set_focus(self, 1)
					local delay = 7.5
					if self.study then
						delay = 10
					end
					msg.post("main:/core_study", "event", {
						id = "open_reward_days"
					})
					timer.delay(delay, false, function (self)
						modal_reward_visit_functions.hidden(self)
					end)
				end)
			end)
		end

	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	self.druid:on_input(action_id, action)

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		local btn = self.btns[focus_btn_id]

		-- Кнопка заблокирована
		if btn.disabled or self.disabled then
			return false
		end

		local node = btn.node or btn.wrap_node or btn.node_bg
		gui_animate.activate(self, node)

		if btn.id == "close" then
			modal_reward_visit_functions.hidden(self)
		end
	end

	if action_id == hash("action") and  action.pressed then
		function_activate(self, 1)
		return false

	elseif self.disabled then
		return false
	end

	local function function_back(self)
		modal_reward_visit_functions.hidden(self)
	end

	return gui_input.on_input(self, action_id, action, function_focus, function_activate, function_back, function_post_focus)
end

function on_reload(self)

end
