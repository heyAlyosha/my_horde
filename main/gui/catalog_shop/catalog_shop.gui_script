local druid = require("druid.druid")
local gui_catalog = require "main.gui.modules.gui_catalog"
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local gui_animate = require "main.gui.modules.gui_animate"
local gui_manager = require "main.gui.modules.gui_manager"
local api_player = require "main.game.api.api_player"


local gui_loader = require "main.gui.modules.gui_loader"
local catalog_shop_functions = require "main.gui.catalog_shop.modules.catalog_shop_functions"
local sound_render = require "main.sound.modules.sound_render"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local api_core_shop = require "main.core.api.api_core_shop"
local live_update_atlas = require "main.game.live_update.atlas.live_update_atlas"
local gui_catalog_type_shop = require "main.gui.modules.gui_catalog.gui_catalog_type_shop"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(storage_gui.orders.inventary_component)

	self.type = "shop"
	self.type_gui = "inventary"
	self.id = "catalog_shop"
	self.id_catalog = self.id

	self.btns = {}

	-- Сообщаем обёртке, что раздел открыт
	gui_manager.add_screen("catalog_shop", msg.url())

	msg.post("main:/music", "play", {sound = "music-shop"})
	sound_render.play("open_shop", url_object)

	self.nodes = {
		title = gui.get_node("title"),
		wrap = gui.get_node("wrap_catalog"),
		scroll_wrap = gui.get_node("scroll_template/line"),
		scroll_caret = gui.get_node("scroll_template/scroll"),
		node_for_clone = gui.get_node("item_template/wrap"),
		catalog_view = gui.get_node("catalog_view"),
		catalog_content = gui.get_node("catalog_content"),
		catalog_input = gui.get_node("catalog_input"),
		wrap_detail = gui.get_node("wrap_detail"),
		detail_loader = gui.get_node("loader_icon_template/loader_icon"),
		detail_icon = gui.get_node("detail_icon"),
		detail_icon_size = gui.get_node("detail_icon_size"),
		detail_title = gui.get_node("detail_title"),
		detail_description = gui.get_node("detail_description"),
		detail_description_mini = gui.get_node("detail_description_mini"),
		detail_gift = gui.get_node("detail_gift"),

		btn_close = gui.get_node("btn-close-template/btn"),
		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),
		btn_smart = gui.get_node("btn_smart_template/btn_wrap"),
		btn_smart_title = gui.get_node("btn_smart_template/btn_title"),

		wrap_upgrade = gui.get_node("wrap_upgrade"),
		upgrade_description = gui.get_node("upgrade_description"),
		upgrade_value_value = gui.get_node("upgrade_value_value"),
		upgrade_price_price = gui.get_node("upgrade_price_value"),
		btn_upgrade_trap = gui.get_node("upgrade_trap_btn_template/btn_wrap"),
		btn_upgrade_trap_title = gui.get_node("upgrade_trap_btn_template/btn_title"),
		btn_upgrade_catch = gui.get_node("upgrade_catch_btn_template/btn_wrap"),
		btn_upgrade_catch_title = gui.get_node("upgrade_catch_btn_template/btn_title"),
	}

	gui_lang.set_text_upper(self, self.nodes.title, "_shop", before_str, after_str)
	--gui_animate.show_bottom(self, self.nodes.wrap , nil)

	self.druid = druid.new(self)
	self.focus_btn_id = nil
end

function final(self)
	gui_manager.remove_screen("catalog_shop", msg.url())
	gui_input.on_final(self)
	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)

	-- Сохраняем позиции кнопок
	storage_gui.positions[self.id] = storage_gui.positions[self.id] or {}
	if self.btns then
		for i = 1, #self.btns do
			local btn = self.btns[i]

			if not btn.scroll then
				storage_gui.positions[self.id][btn.id] = gui.get_screen_position(btn.node)

			elseif btn.scroll and btn.scroll:is_node_in_view(btn.wrap_node) then
				storage_gui.positions[self.id][btn.id] = gui.get_screen_position(btn.wrap_node)

			else
				storage_gui.positions[self.id][btn.id] = nil
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)

	gui_loyouts.on_message(self, message_id, message)
	live_update_atlas.on_message_gui(self, message_id, message, sender)

	if message_id == hash("layout_changed")then
		msg.post("/loader_gui", "reload_gui_component", {id = self.id})

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") and message.visible then
		self.modal = message.modal
		self.btn_close = message.btn_close
		self.btn_smart = message.btn_smart

		gui_animate.show_bottom(self, self.nodes.wrap , nil)
		catalog_shop_functions.render_catalog(self)
		gui_catalog_type_shop.render_detail(self, false)
		catalog_shop_functions.render_upgrade(self, false)

		gui_input.init(self)

		if not self.modal then
			-- Если это не модальное окно
			-- Сообщаем обёртке, что раздел открыт
			msg.post("main:/loader_gui", "set_status", {
				id = "inventary_wrap",
				section_id = self.type,
				type = "open_section",
			})
		end

		timer.delay(0.2, false, function(self)
			if #self.btns > 0 then
				gui_input.set_focus(self, 1)
			end
			gui_loader.visible(false, node_wrap, node_icon, node_body, self)
		end)

	elseif message_id == hash("set_status") then
		-- Результат покупки
		if message.type == "result_buy" then
			local item_id = message.value.item_id
			catalog_shop_functions.result_buy(self, item_id)

		elseif message.type == "update" then
			for key, value in pairs(self.cards_id) do
				local item = self.cards_id[key]

				-- обновляем каталог
				local object = game_content_artifact.get_item(key, player_id, is_game, is_reward)
				item.count_shop = object.count_shop
				item.count = object.count
				item.buy = object.buy
				item.disable_buy = object.disable_buy
				gui_catalog_type_shop.render_item_content(self, item)

			end

		elseif message.type == "scroll_to_btn" then
			local btn = self.btns_id[message.btn_id]
			self["scroll_"..self.id_catalog]:scroll_to(vmath.vector3(0, gui.get_position(btn.node).y, 0))
			gui_input.set_focus_id(self, message.btn_id)
		end

	elseif message_id == hash("result_upgrade") and message.status == "success" then
		catalog_shop_functions.result_upgrade(self, message.upgrade_id, message.upgrade_value)

	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)

	self.druid:on_input(action_id, action)

	local function function_back(self)
		msg.post("main:/loader_gui", "visible", {
			id = "inventary_wrap",
			visible = false
		})
	end

	if (action_id == hash("up") or action_id == hash("down"))  then
		if self.focus_btn_id and self.btns[self.focus_btn_id] and self.btns[self.focus_btn_id].id == "upgrade" then
			if action.pressed then
				msg.post("main:/sound", "play", {sound_id = "nav_block_2"})
			end

			return true
		else
			--catalog_shop_functions.render_upgrade(self, false)
		end
	end

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		local btn = self.btns[focus_btn_id]

		

		-- если это клик или тач не по кнопке
		if gui_input.is_touch(self, action_id, action) and not gui.pick_node(btn.wrap_node or btn.node, action.x, action.y) then
			
		elseif gui_input.is_touch(self, action_id, action) and not gui.pick_node(btn.wrap_node or btn.node, action.x, action.y) then
			
		else
			pprint("function_activate")
			if btn.is_card and (gui.pick_node(btn.node, action.x, action.y) or action_id == hash("enter")) and not btn.disabled then
				sound_render.play("activate_btn", url_object)
				gui_animate.activate(self, btn.wrap_node or btn.node)
				catalog_shop_functions.buy(self, btn)

				msg.post("main:/core_study", "event", {
					type = "activate_btn",
					from_id = self.id,
					btn_id = btn.id
				})

			elseif btn.id == "btn_smart" and self.btn_smart.type == "message" then
				sound_render.play("activate_btn", url_object)
				gui_animate.activate(self, btn.wrap_node or btn.node)
				msg.post(self.btn_smart.message_url, self.btn_smart.message_id, self.btn_smart.message)

				msg.post("main:/core_study", "event", {
					type = "activate_btn",
					from_id = self.id,
					btn_id = btn.id
				})

			elseif btn.upgrade and not btn.disabled then
				sound_render.play("activate_btn", url_object)
				gui_animate.activate(self, btn.wrap_node or btn.node)
				catalog_shop_functions.activate_upgrade(self, btn)
			end

		end
	end

	if self.btn_smart and not action_id and action.x and action.y and gui.pick_node(self.nodes.btn_smart, action.x, action.y) then
		gui_input.set_focus(self, #self.btns, function_post_focus, is_remove_other_focus)
		return true
	elseif self.btn_smart and gui_input.is_touch(self, action_id, action) and gui.pick_node(self.nodes.btn_smart, action.x, action.y) then
		function_activate(self, #self.btns, action_id, action)
		return true
	end

	local function function_post_focus(self, index, btn)
		-- Находим
		local height_card = gui.get_size(self.nodes.node_for_clone).y
		local height_view_content = gui.get_size(self.nodes.catalog_content).y

		local card = self.cards_id[btn.id]

		if card then
			local center_card = gui.get_position(card.nodes[hash("item_template/wrap")]).y + height_view_content/2 + height_card / 2
			local center_view = center_card - height_view_content/2
			if center_view > 0 then center_view = 0 end

			self["scroll_"..id]:scroll_to(vmath.vector3(0, center_view, 0), false)
		end
	end

	if not action_id and action.x and action.y then
		for i, btn in ipairs(self.btns) do
			if btn.upgrade and gui.pick_node(btn.node, action.x, action.y) and gui.is_enabled(btn.node) then
				if self.focus_btn_id ~= i then
					msg.post("main:/sound", "play", {sound_id = "focus_main_menu"})
				end
				gui_input.set_focus(self, i)
				return true
			end
		end
	elseif gui_input.is_touch(self, action_id, action) then
		for i, btn in ipairs(self.btns) do
			if btn.upgrade and gui.pick_node(btn.node, action.x, action.y) and gui.is_enabled(btn.node) then
				function_activate(self, i)
				return true
			end
		end
	end

	local gui_input_return = gui_catalog.catalog_input(self, self.id_catalog, action_id, action, self.type, function_activate, function_back)

	-- Переключение влево вправо
	if (action_id == hash("up") or action_id == hash("down")) and action.pressed and self.focus_btn_id and self.btns[self.focus_btn_id] and self.btns[self.focus_btn_id].upgrade then
		local new_focus = self.focus_btn_id - 1
		local btn = self.btns[new_focus]
		gui_input.set_focus(self, new_focus)
		
		local height_card = gui.get_size(self.nodes.node_for_clone).y
		local height_view_content = gui.get_size(self.nodes.catalog_content).y

		local card = self.cards_id[btn.id]

		if card then
			local center_card = gui.get_position(card.nodes[hash("item_template/wrap")]).y + height_view_content/2 + height_card / 2
			local center_view = center_card - height_view_content/2
			if center_view > 0 then center_view = 0 end

			self["scroll_"..self.id]:scroll_to(vmath.vector3(0, center_view, 0), false)
		end
		
	end

	if gui_input_return then
		return true
	end
	
end

function on_reload(self)

end
