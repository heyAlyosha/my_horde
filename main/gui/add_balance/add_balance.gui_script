local storage_gui = require "main.storage.storage_gui"
local add_balance_functions = require "main.gui.add_balance.modules.add_balance_functions"
local core_functions_array = require "main.core.functions.core_functions_array"
local gui_input = require "main.gui.modules.gui_input"
local gui_integer = require "main.gui.modules.gui_integer"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"

function init(self)
	gui.set_render_order(storage_gui.orders.modal + 1)

	self.nodes = {
		elem = gui.get_node('elem')
	}

	gui_loyouts.set_enabled(self, self.nodes.elem, false)

	-- Генерируем иконку для добавления
	local type = 'score'
	local position_start = vmath.vector3(250, 250, 1)
	local position_end = vmath.vector3(50, 1000, 1)
	local count = 10
	local params = {
		duration = 0.5
	}

	--[[
	timer.delay(0.2, true, function (self)
		add_elem(self, type, position_start, count, params)
	end)
	--]]

	

end

function final(self)
	gui_input.on_final(self)
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	if message.id == "add_balance" and  not message.from_id then
		if message.type == "stack" then
			local score_step = 25
			local coins_step = 25
			local animate_stack = message.setting_stack.animate_stack

			local coins =  message.setting_stack.coins or 0
			local score =  message.setting_stack.score or 0
			local items = {}

			-- Генерируем кучу монет 
			local index = 0

			gui_integer.to_parts(self, coins, coins_step, function (self, value)
				items[#items + 1] = {
					type_valute = 'coins',
					count = value,
					position_start = message.start_position,
					position_end = message.setting_stack.end_position,
					height_flight = message.setting_stack.height_flight,
					random_height = message.setting_stack.random_height,
					random_width = message.setting_stack.random_width,
				}
			end)

			-- Генерируем кучу опыта
			gui_integer.to_parts(self, score, score_step, function (self, value)
				items[#items + 1] = {
					type_valute = 'score',
					count = value,
					position_start = message.start_position,
					position_end = message.setting_stack.end_position,
					height_flight = message.setting_stack.height_flight,
					random_height = message.setting_stack.random_height,
					random_width = message.setting_stack.random_width,
				}
			end)

			math.randomseed(os.clock() * index)

			-- Если это анимированное выпадение кучи золота
			core_functions_array.shake(items)
			for i = 1, #items do
				local item = items[i]

				local delay = 0.01 * i
				if not animate_stack then
					delay = 0.0001
				end

				timer.delay(delay, false, function (self)
					add_balance_functions.add_elem_curve(self, item.type_valute, item.count, item.position_start, item.position_end, i, item.height_flight, item.random_height, item.random_width)

					-- Последний элемент
					if i == #items then
						for id, url in pairs(storage_gui.components_visible) do
							if id ~= "add_balance" and id ~= hash("add_balance") then
								msg.post("/loader_gui", "set_status", {
									id = id,
									type = "stack_success",
									value = message.setting_stack
								})
							end
						end

					end
				end)
			end

		else
			local params = {
				duration = 0.5,
				not_screen_to_local = message.not_screen_to_local
			}
			add_balance_functions.add_elem(self, message.type, message.start_position, message.value, params)
		end
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	
end

function on_reload(self)
	
end
