local druid = require("druid.druid")
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local gui_animate = require "main.gui.modules.gui_animate"
local gui_manager = require "main.gui.modules.gui_manager"
local inventary_detail_function = require "main.gui.inventary_detail.modules.inventary_detail_function"
local inventary_detail_sell = require "main.gui.inventary_detail.modules.inventary_detail_sell"
local inventary_detail_buy = require "main.gui.inventary_detail.modules.inventary_detail_buy"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local live_update_atlas = require "main.game.live_update.atlas.live_update_atlas"

function init(self)
	--msg.post(".", "acquire_input_focus")
	gui_manager.add_screen("inventary_detail", msg.url())
	self.type_gui = "inventary"
	self.druid = druid.new(self)
	self.not_remove_other_focus = true
	self.not_set_blocking_focus_component = true

	gui.set_render_order(storage_gui.orders.inventary_component + 1)

	self.nodes_object = {
		wrap = gui.get_node("object_template/wrap"),
		img = gui.get_node("object_template/image"),
		img_wrap = gui.get_node("object_template/image_wrap"),
		title = gui.get_node("object_template/title"),
		description = gui.get_node("object_template/description"),
		price = gui.get_node("object_template/price_title"),
		price_icon = gui.get_node("object_template/price_icon"),
		btn = gui.get_node("object_template/btn_template/btn_wrap"),
		btn_title = gui.get_node("object_template/btn_template/btn_title"),
		count = gui.get_node("object_template/count"),
		count_shop = gui.get_node("object_template/count_shop"),
		error = gui.get_node("object_template/error"),
		loader_img = gui.get_node("object_template/loader_icon_template/loader_icon"),
	}

	self.nodes_achieve = {
		wrap = gui.get_node("achieve_template/wrap"),
		img = gui.get_node("achieve_template/image"),
		img_wrap = gui.get_node("achieve_template/image_wrap"),
		title = gui.get_node("achieve_template/title"),
		description = gui.get_node("achieve_template/description"),
		ray = gui.get_node("achieve_template/ray"),
		shadow = gui.get_node("achieve_template/shadow"),
		progress_wrap = gui.get_node("achieve_template/progress_bar_template/wrap"),
		progress_line = gui.get_node("achieve_template/progress_bar_template/line"),
		progress_number = gui.get_node("achieve_template/progress_bar_template/number"),
		pedestal = gui.get_node("achieve_template/image_pedestal"),
		loader_img = gui.get_node("achieve_template/loader_icon_template/loader_icon"),
	}

	-- Добавляем кнопки
	self.btn_object = {id = "btn", type = "btn", section = "tabs", node = self.nodes_object.btn, node_title = self.nodes_object.btn_title, icon = "btn_ellipse_green_",}
	self.btns = {}

	gui_input.set_focus(self, 1, nil, false)

	timer.delay(0.1, false, function(self)
		--gui_input.set_focus(self, 1, nil, false)
		--msg.post("", message_id)
	end)
end

function final(self)
	gui_manager.remove_screen("inventary_detail", msg.url())
	self.druid:final()
	gui_input.on_final(self)
	live_update_atlas.on_final_gui(self)
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	gui_loyouts.on_message(self, message_id, message)
	live_update_atlas.on_message_gui(self, message_id, message, sender)

	if message_id == hash("focus") then
		--gui_input.set_focus(self, message.focus,  nil, false)

	elseif message_id == hash("visible") then
		
	elseif message_id == hash("hidden") then
		gui.animate(self.node, "color.w", 0, gui.EASING_LINEAR, 0.25, 0 , function (self)
			msg.post("/loader_gui", "visible", {
				id = "inventary_detail",
				visible = false
			})
		end)

	elseif message_id == hash("set_status") then
		--Подставляем объект
		if message.type == "set_object" then
			local id = message.id_object or message.id_achieve
			inventary_detail_function.render(self, message.type_object, message.id_object)

		-- Результат продажи
		elseif message.type == "result_sell" then
			local object = message.value.prize
			local type_object = message.value.type_object 
			local coins = message.value.coins
			local score = message.value.score
			local status = message.value.status
			inventary_detail_sell.result_sell(self, status, object, type_object, coins, score, inventary_detail_function)

			-- Продажа
		elseif message.type == "sell" then
			local id = message.value.id
			local type = message.value.type_object
			inventary_detail_sell.sell(self, id, type)

			-- Результат покупки
		elseif message.type == "result_buy" then
			local id = message.value.item_id
			local type_object = message.value.type_object 
			local status = message.value.status
			inventary_detail_buy.result(self, status, id, type_object, inventary_detail_function)

			-- Покупка
		elseif message.type == "buy" then
			local id = message.value.id
			local type = message.value.type_object
			inventary_detail_buy.buy(self, id, type)

		elseif message.type == "btn_sell_activate" or message.type == "btn_buy_activate" then
			inventary_detail_function.btn_activate(self, 1)
		end
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	self.druid:on_input(action_id, action)

	if #self.btns < 1 then
		return false
	end

	if not action_id and gui.pick_node(self.btns[1].node, action.x, action.x)then
		gui_input.set_focus(self, 1, nil, false)
	elseif gui_input.is_touch(self, action_id, action) and gui.pick_node(self.btns[1].node, action.x, action.y) and action.pressed then
		inventary_detail_function.btn_activate(self, 1)
	end

	--gui_input.on_input(self, action_id, action, function_focus, inventary_detail_function.btn_activate, function_back, function_post_focus)
end

function on_reload(self)

end