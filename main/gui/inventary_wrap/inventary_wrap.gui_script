local druid = require("druid.druid")
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local storage_game = require "main.game.storage.storage_game"
local gui_animate = require "main.gui.modules.gui_animate"
local gui_manager = require "main.gui.modules.gui_manager"
local inventary_wrap_section = require "main.gui.inventary_wrap.modules.inventary_wrap_section"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local sound_render = require "main.sound.modules.sound_render"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui_manager.add_screen("inventary_wrap", msg.url())
	self.druid = druid.new(self)
	gui.set_render_order(storage_gui.orders.inventary_wrap)

	self.id = "inventary_wrap"
	self.type_gui = "inventary"
	storage_gui.inventary_wrap.visible = true
	storage_gui.inventary_wrap.last_sound = storage_game.current_music_play

	self.nodes = {
		wrap = gui.get_node("wrap"),
		btn_upgrade = gui.get_node("upgrade_btn_template/btn_bg"),
		btn_upgrade_title = gui.get_node("upgrade_btn_template/btn_title"),
		btn_skins = gui.get_node("skins_btn_template/btn_bg"),
		btn_skins_title = gui.get_node("skins_btn_template/btn_title"),
		btn_trophy = gui.get_node("trophy_btn_template/btn_bg"),
		btn_trophy_title = gui.get_node("trophy_btn_template/btn_title"),
		btn_rating = gui.get_node("rating_btn_template/btn_bg"),
		btn_rating_title = gui.get_node("rating_btn_template/btn_title"),
		btn_close = gui.get_node("close_btn_template/btn"),
		btn_close_icon = gui.get_node("close_btn_template/btn_icon"),
	}

	-- Добавляем кнопки
	self.btns = {
		{
			id = "upgrade", type = "btn", section = "tabs", 
			node = self.nodes.btn_upgrade, 
			node_title_section = self.nodes.btn_upgrade_title, 
			icon = "btn_interface_",
		},
		{
			id = "skins", type = "btn", section = "tabs", 
			node = self.nodes.btn_skins, 
			node_title_section = self.nodes.btn_skins_title, 
			icon = "btn_interface_",
		},
		{
			id = "trophy", type = "btn", section = "tabs", 
			node = self.nodes.btn_trophy,
			node_title_section = self.nodes.btn_trophy_title, 
			icon = "btn_interface_"
		},
		{
			id = "rating", type = "btn", section = "tabs", 
			node = self.nodes.btn_rating, 
			--node_title = self.nodes.btn_characteristic_title, 
			node_title_section = self.nodes.btn_rating_title, 
			icon = "btn_interface_"
		},
		{
			id = "close", type = "btn", section = "tabs", 
			node = self.nodes.btn_close, 
			wrap_node = self.nodes.btn_close_icon, 
			icon = "btn_interface_", 
		},
	}

	-- Текст кнопок
	gui_lang.set_text_upper(self, self.nodes.btn_upgrade_title, "_improvements")
	gui_lang.set_text_upper(self, self.nodes.btn_skins_title, "_skins")
	gui_lang.set_text_upper(self, self.nodes.btn_trophy_title, "_trophy")
	gui_lang.set_text_upper(self, self.nodes.btn_rating_title, "_best_players")

	self.btns_id = {}

	for i = 1, #self.btns do
		local item = self.btns[i]
		self.btns_id[item.id] = item
	end

	-- Составляем разделы
	self.open_section_id = nil
	self.sections = {
		{id = "upgrades", id_loader_gui = "upgrades", visible = false, btn = self.btns_id.upgrade},
		{id = "skins", id_loader_gui = "catalog_shop", visible = false, btn = self.btns_id.skins},
		{id = "trophy", id_loader_gui = "catalog_achieve", visible = false, btn = self.btns_id.trophy},
		{id = "rating", id_loader_gui = "catalog_characteristic", visible = false, btn = self.btns_id.rating}
	}
	self.sections_id = {}
	for i, item in ipairs(self.sections) do
		self.sections_id[item.id] = item
	end

	-- Скрываем кнопки в интерфейсе
	msg.post("main:/loader_gui", "set_status", {
		id = "interface",
		type = "visible_btns",
		visible = false,
	})

	timer.delay(0.1, false, function(self)
		gui_input.set_focus(self, 1)
	end)

	for k, url in pairs(storage_gui.components_visible) do
		msg.post(url, "event", {id = "visible_gui", component_id = self.id})
	end

	msg.post(".", "visible")
	if storage_player.user_go_url then
		msg.post(storage_player.user_go_url, "set_active_input", {active_input = false})
	end

	msg.post(storage_gui.visible_virtual_gamepad, "set_visible", {visible = false})
end

function final(self)
	gui_manager.remove_screen("inventary_wrap", msg.url())
	inventary_wrap_section.open(self, nil)
	msg.post("/loader_gui", "visible", {
		id = "inventary_detail",
		visible = false
	})
	-- Скрываем кнопки в интерфейсе
	msg.post("main:/loader_gui", "set_status", {
		id = "interface",
		type = "visible_btns",
		visible = true,
	})

	self.druid:final()
	gui_input.set_last_focus_component(self, msg.url().fragment)
	gui_input.on_final(self)

	-- Включаем музыку, которая проигрывалась перед открытием инвентаря
	msg.post("main:/music", "play", storage_gui.inventary_wrap.last_sound)
	sound_render.play("inventary_category_listen", url_object)

	storage_gui.inventary_wrap.visible = false
	storage_gui.inventary_wrap.last_sound = nil

	for k, url in pairs(storage_gui.components_visible) do
		msg.post(url, "event", {id = "close_gui", component_id = self.id})
	end

	if storage_player.user_go_url then
		msg.post(storage_player.user_go_url, "set_active_input", {active_input = true})
	end

	if storage_gui.visible_virtual_gamepad then
		msg.post(storage_gui.visible_virtual_gamepad, "set_visible", {visible = true})
	end
end

function update(self, dt)
	self.druid:update(dt)

	-- Сохраняем позиции кнопок
	storage_gui.positions[self.id] = storage_gui.positions[self.id] or {}
	for i = 1, #self.btns do
		local btn = self.btns[i]

		storage_gui.positions[self.id][btn.id] = gui.get_screen_position(btn.node)
	end
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") then
		print("visible", storage_player.user_go_url)
		
		if storage_player.user_go_url then
			msg.post(storage_player.user_go_url, "set_active_input", {active_input = false})
		end

	elseif message_id == hash("hidden") then
		gui.animate(self.node, "color.w", 0, gui.EASING_LINEAR, 0.25, 0 , function (self)
			msg.post("main:/loader_gui", "visible", {
				id = "inventary_wrap",
				visible = false
			})
		end)

	elseif message_id == hash("set_status") then
		-- Открылась секция
		if message.type == "open_section" then
			inventary_wrap_section.open(self, message.section_id)
		elseif message.type == "close" then
			msg.post("main:/loader_gui", "visible", {
				id = "inventary_wrap",
				visible = false
			})
		end
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	self.druid:on_input(action_id, action)

	if action_id == hash("down") and self.focus_btn_id and action.pressed then
		local open_section = inventary_wrap_section.get_open_section(self)

		msg.post("/loader_gui", "focus", {
			id = open_section.id_loader_gui,
			focus = 1
		})
		sound_render.play("focus_main_menu")
		return true
	end

	local function function_back(self)
		msg.post("main:/loader_gui", "visible", {
			id = "inventary_wrap",
			visible = false
		})
	end

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		local btn = self.btns[focus_btn_id]

		gui_animate.activate(self, btn.node)

		if btn.id == "close" then
			msg.post("main:/loader_gui", "visible", {
				id = "inventary_wrap",
				visible = false,
			})
		else
			inventary_wrap_section.open(self, btn.id)
		end
	end

	return gui_input.on_input(self, action_id, action, function_focus, function_activate, function_back, function_post_focus)
end

function on_reload(self)

end