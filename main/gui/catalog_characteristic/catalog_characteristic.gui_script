local druid = require("druid.druid")
local gui_catalog = require "main.gui.modules.gui_catalog"
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local storage_player = require "main.storage.storage_player"
local gui_animate = require "main.gui.modules.gui_animate"
local gui_manager = require "main.gui.modules.gui_manager"
local api_player = require "main.game.api.api_player"

local gui_loader = require "main.gui.modules.gui_loader"
local catalog_characteristic_functions = require "main.gui.catalog_characteristic.modules.catalog_characteristic_functions"
local modal_characteristics_render = require "main.gui.modals.modal_characteristics.modules.modal_characteristics_render"
local modal_characteristics_up = require "main.gui.modals.modal_characteristics.modules.modal_characteristics_up"
local modal_characteristics_animations = require "main.gui.modals.modal_characteristics.animations.modal_characteristics_animations"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local sound_render = require "main.sound.modules.sound_render"
local live_update_atlas = require "main.game.live_update.atlas.live_update_atlas"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(storage_gui.orders.inventary_component)

	self.type = "characteristic"
	self.type_gui = "inventary"
	self.id = "catalog_characteristic"
	self.id_catalog = self.id

	-- Сообщаем обёртке, что раздел открыт
	msg.post("main:/loader_gui", "set_status", {
		id = "inventary_wrap",
		section_id = self.type,
		type = "open_section",
	})
	gui_manager.add_screen("catalog_characteristic", msg.url())

	msg.post("main:/music", "play", {sound = "music-catalog"})
	sound_render.play("inventary_category_listen", url_object)

	self.nodes = {
		body = gui.get_node("body"),
		title_main = gui.get_node("title_main"),
		title_horde = gui.get_node("title_horde"),
	}

	gui_lang.set_text(self, self.nodes.title_main, "_title_upgrade_main")
	gui_lang.set_text(self, self.nodes.title_horde, "_title_upgrade_horde")

	self.druid = druid.new(self)
	self.focus_btn_id = nil

	self.btns_id = {}
	self.btns = {}

	-- Карточки с харкатеристиками
	self.cards = {
		{id = "live", template_name = "item_main_live_template", section = 1},
		{id = "damage", template_name = "item_main_damage_template", section = 2},
		{id = "speed_damage", template_name = "item_main_speed_damage_template", section = 3},
		{id = "max_horde", template_name = "item_max_horde_template", section = 1},
		{id = "zombie_live", template_name = "item_zombie_live_template", section = 2},
		{id = "zombie_damage", template_name = "item_zombie_damage_template", section = 3},
		{id = "zombie_speed_damage", template_name = "item_zombie_speed_damage_template", section = 4},
	}

	--catalog_characteristic_functions.render_catalog(self)
	modal_characteristics_render.render(self, true)

	timer.delay(0.1, false, function(self)
		if #self.btns > 0 then
			gui_input.set_focus(self, 1)
		end

		local node_body = self.nodes.body
	end)
end

function final(self)
	gui_manager.remove_screen("catalog_characteristic", msg.url())
	gui_input.on_final(self)
	self.druid:final()
	live_update_atlas.on_final_gui(self)
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	live_update_atlas.on_message_gui(self, message_id, message, sender)

	gui_loyouts.on_message(self, message_id, message)
	if message_id == hash("layout_changed") then
		msg.post("/loader_gui", "reload_gui_component", {id = self.id})

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("set_status") then
		-- Результат повышения уровня
		if message.type == "success_up" then
			local success_id = message.value.id
			modal_characteristics_render.render(self, true)

			-- Устанавливаем фокус
			if storage_player.characteristic_points > 0 then
				if self.focus_btn_id > #self.btns then
					self.focus_btn_id = #self.btns
				end

				gui_input.set_focus(self, self.focus_btn_id)
			else
				msg.post("main:/loader_gui", "focus", {
					id = "inventary_wrap", -- id компонента в лоадер гуи
					focus = 4 -- кнопка фокуса
				})
			end

			local btn = self.btns_id[message.value.id]
			modal_characteristics_animations.up(self, btn.name_template)
			catalog_characteristic_functions.render_stats(self)
		end
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)

	self.druid:on_input(action_id, action)

	gui_loyouts.on_message(self, message_id, message)
	if message_id == hash("layout_changed") then
		msg.post("/loader_gui", "reload_gui_component", {id = self.id})

	elseif self.focus_btn_id == 1 and action_id == hash("up") and action.pressed then
		msg.post("main:/loader_gui", "focus", {
			id = "inventary_wrap", -- id компонента в лоадер гуи
			focus = 1 -- кнопка фокуса
		})
	end

	local function function_back(self)
		msg.post("main:/loader_gui", "visible", {
			id = "inventary_wrap",
			visible = false
		})
	end

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		modal_characteristics_up.activate(self, self.btns[focus_btn_id], true)
		return true
	end

	return gui_input.on_input(self, action_id, action, function_focus, function_activate, function_back, function_post_focus)
end

function on_reload(self)

end
