local druid = require("druid.druid")
local storage_game = require "main.game.storage.storage_game"
local gui_catalog_prize_magazine = require "main.gui.modules.gui_catalog_prize_magazine"
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local gui_animate = require "main.gui.modules.gui_animate"
local gui_manager = require "main.gui.modules.gui_manager"
local api_player = require "main.game.api.api_player"

local catalog_prize_magazine_functions = require "main.gui.catalog_prize_magazine.modules.catalog_prize_magazine_functions"
-- Адаптирвоанный интерфейс
local gui_loyouts = require "main.gui.modules.gui_loyouts"
-- Переводы
local gui_lang = require "main.lang.gui_lang"
local lang_core = require "main.lang.lang_core"
local live_update_atlas = require "main.game.live_update.atlas.live_update_atlas"
local storage_gui = require "main.storage.storage_gui"

function init(self)
	gui.set_render_order(storage_gui.orders.modal)
	msg.post(".", "acquire_input_focus")
	gui_manager.add_screen("catalog_prize_magazine", msg.url())

	self.score = storage_game.game.result.score

	self.nodes = {
		wrap = gui.get_node("wrap"),
		title = gui.get_node("title"),
		description = gui.get_node("description"),
		scroll_wrap = gui.get_node("scroll_template/line"),
		scroll_caret = gui.get_node("scroll_template/scroll"),
		btn_close = gui.get_node("btn-close-template/btn"),
		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),
		node_for_clone = gui.get_node("item_template/wrap"),
		catalog_view = gui.get_node("catalog_view"),
		catalog_content = gui.get_node("catalog_content"),
		catalog_input = gui.get_node("catalog_input"),
		balance_wrap = gui.get_node("balance-template/wrap"),
		balance_number = gui.get_node("balance-template/number"),
	}

	self.id = "catalog_prize_magazine"

	gui_lang.set_text_upper(self, self.nodes.title, "_shop_prizes", before_str, after_str)
	gui_lang.set_text_upper(self, self.nodes.description, "_buy_prizes_points_you_win", before_str, after_str)

	gui_animate.show_bottom(self, self.nodes.wrap , nil)
	msg.post("main:/loader_gui", "visible", {id = "bg", parent_id = self.id, visible = true, type = hash("animated_close")})

	self.druid = druid.new(self)

	local levels = game_content_prize.get_catalog_prizes(self, is_magazine, true)
	local params = {
		margin = 5,
		node_for_clone = self.nodes.node_for_clone,
		node_catalog_view = self.nodes.catalog_view,
		node_catalog_content = self.nodes.catalog_content,
		node_catalog_input = self.nodes.catalog_input,
		node_scroll = self.nodes.catalog,
		node_scroll_wrap = self.nodes.scroll_wrap,
		node_scroll_caret = self.nodes.scroll_caret,
	}

	self.id_catalog = "catalog_prize_magazine"
	gui_catalog_prize_magazine.loader_visible(false)

	self.cards = gui_catalog_prize_magazine.create_catalog(self, self.id_catalog, levels, params)
	self.cards_ids = {}

	self.btns = {
		{id = "close", type = "btn", section = "close", node = self.nodes.btn_close, wrap_node = self.nodes.btn_close_icon, node_title = false, icon = "btn_circle_bg_red_", wrap_icon = "btn_icon_close_",},
	}
	self.focus_btn_id = nil

	for i = 1, #self.cards do
		local item = self.cards[i]
		self.cards_ids[item.id] = item

		local btn = {
			id = item.id,
			card_id = item.id,
			type = "btn", 
			section = "card_"..item.cols, 
			node = item.nodes[hash("item_template/btn_template/btn_wrap")],
			node_title = item.nodes[hash("item_template/btn_template/btn_title")],
			wrap_node = item.nodes[hash("item_template/wrap")],
			icon = "button_default_green_",
			wrap_icon = "bg_modal_",
			is_card = true,
			scroll = self["scroll_"..self.id_catalog], -- Если внутри скролла
		}

		table.insert(self.btns, btn)
	end

	local score_current = self.score
	gui_catalog_prize_magazine.update_catalog(self, self.cards, score_current)

	timer.delay(0.1, false, function(self)
		local focus_btn = gui_catalog_prize_magazine.scroll_to_buy(self, self.id_catalog, self.cards)
		if focus_btn then
			focus_btn = focus_btn + 1
		else
			focus_btn = 1
		end
		gui_input.set_focus(self, focus_btn)

		if storage_game.game.study then
			self.btn_touch_node = self.btns[focus_btn].node
			timer.delay(0.5, false, function (self)
				msg.post("main:/loader_gui", "set_status", {
					id = "study",
					type = "set_items",
					timeline = {
						{
							type = "touch",
							position_end = gui.get_screen_position(self.btn_touch_node)
						}
					}
				})
			end)
		end

	end)
	
end

function final(self)
	gui_manager.remove_screen("catalog_prize_magazine", msg.url())
	live_update_atlas.on_final_gui(self)
	msg.post("main:/loader_gui", "visible", {id = "bg", parent_id = self.id, visible = false, type = hash("animated_close")})

	-- Закрылось окно с магазином призов после игры
	msg.post("game-room:/core_game", "event", {id = "close_game_shop"})
	self.druid:final()
	gui_input.on_final(self)

	msg.post("main:/loader_gui", "visible", {
		id = "study",
		visible = false
	})
end

function update(self, dt)
	self.druid:update(dt)

	-- Сохраняем позиции кнопок
	storage_gui.positions[self.id] = {}
	for i = 1, #self.btns do
		local btn = self.btns[i]

		if btn.id == "close" then
			table.insert(storage_gui.positions[self.id], gui.get_screen_position(btn.node))

		elseif btn.is_buy and btn.scroll and btn.scroll:is_node_in_view(btn.node) then
			table.insert(storage_gui.positions[self.id], gui.get_screen_position(btn.node))

		end
	end
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	live_update_atlas.on_message_gui(self, message_id, message, sender)
	if message_id == hash("layout_changed") then
		
	end

	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("layout_changed") then
		catalog_prize_magazine_functions.clear_catalog(self)

		local levels = game_content_prize.get_catalog_prizes(self, is_magazine, true)
		local params = {
			margin = 5,
			node_for_clone = self.nodes.node_for_clone,
			node_catalog_view = self.nodes.catalog_view,
			node_catalog_content = self.nodes.catalog_content,
			node_catalog_input = self.nodes.catalog_input,
			node_scroll = self.nodes.catalog,
			node_scroll_wrap = self.nodes.scroll_wrap,
			node_scroll_caret = self.nodes.scroll_caret,
		}

		self.id_catalog = "catalog_prize_magazine"

		self.cards = {}
		self.cards = gui_catalog_prize_magazine.create_catalog(self, self.id_catalog, levels, params)

		for i = 1, #self.cards do
			local item = self.cards[i]
			self.cards_ids[item.id] = item

			local btn = {
				id = item.id,
				card_id = item.id,
				type = "btn", 
				section = "card_"..item.cols, 
				node = item.nodes[hash("item_template/btn_template/btn_wrap")],
				node_title = item.nodes[hash("item_template/btn_template/btn_title")],
				wrap_node = item.nodes[hash("item_template/wrap")],
				icon = "button_default_green_",
				wrap_icon = "bg_modal_",
				is_card = true,
				scroll = self["scroll_"..self.id_catalog], -- Если внутри скролла
			}

			table.insert(self.btns, btn)
		end

		local score_current = self.score
		gui_catalog_prize_magazine.update_catalog(self, self.cards, score_current)

		timer.delay(0.1, false, function(self)
			gui_input.set_focus(self, 2)

			local focus_btn = gui_catalog_prize_magazine.scroll_to_buy(self, self.id_catalog, self.cards)
			if focus_btn then
				focus_btn = focus_btn + 1
			else
				focus_btn = 1
			end
			gui_input.set_focus(self, focus_btn)

			if storage_game.game.study then
				self.btn_touch_node = self.btns[focus_btn].node
				timer.delay(0.5, false, function (self)
					msg.post("main:/loader_gui", "set_status", {
						id = "study",
						type = "set_items",
						timeline = {
							{
								type = "touch",
								position_end = gui.get_screen_position(self.btn_touch_node)
							}
						}
					})
				end)
			end

		end)
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	if storage_gui.components_visible.modal_pause then
		return true
	end
	if action_id == hash("up") and action.pressed then
		if self.focus_btn_id == 1 then
			msg.post("main:/loader_gui", "focus", {
				id = "interface", -- id компонента в лоадер гуи
				focus = 1 -- кнопка фокуса
			})

			msg.post("main:/sound", "play", {sound_id = "focus_main_menu"})

			return 
		end

	end
	self.druid:on_input(action_id, action)

	-- Нажатие на кнопки
	return gui_catalog_prize_magazine.catalog_input(self, self.id_catalog, action_id, action, catalog_prize_magazine_functions.function_activate, catalog_prize_magazine_functions.hidden)
end

function on_reload(self)

end
