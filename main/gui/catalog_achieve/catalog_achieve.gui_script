local druid = require("druid.druid")
local gui_catalog = require "main.gui.modules.gui_catalog"
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local gui_animate = require "main.gui.modules.gui_animate"
local gui_manager = require "main.gui.modules.gui_manager"
local api_player = require "main.game.api.api_player"
local game_content_prize = require "main.game.content.game_content_prize"
local gui_loader = require "main.gui.modules.gui_loader"
local catalog_achieve_functions = require "main.gui.catalog_achieve.modules.catalog_achieve_functions"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local gui_input = require "main.gui.modules.gui_input"
local sound_render = require "main.sound.modules.sound_render"
local live_update_atlas = require "main.game.live_update.atlas.live_update_atlas"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(storage_gui.orders.inventary_component)

	gui_loader.visible(true, node_wrap, node_icon, node_body, self) 

	self.type = "achieve"
	self.type_gui = "inventary"
	self.id = "catalog_achieve"
	self.id_catalog = self.id

	-- Сообщаем обёртке, что раздел открыт
	msg.post("main:/loader_gui", "set_status", {
		id = "inventary_wrap",
		section_id = self.type,
		type = "open_section",
	})
	gui_manager.add_screen("catalog_achieve", msg.url())

	msg.post("main:/music", "play", {sound = "music-fail"})
	sound_render.play("inventary_category_listen", url_object)

	self.nodes = {
		title = gui.get_node("title"),
		loader_title = gui.get_node("loader_template/loader_text"),
		wrap = gui.get_node("wrap_catalog"),
		scroll_wrap = gui.get_node("scroll_template/line"),
		scroll_caret = gui.get_node("scroll_template/scroll"),
		node_for_clone = gui.get_node("item_template/wrap"),
		catalog_view = gui.get_node("catalog_view"),
		catalog_content = gui.get_node("catalog_content"),
		catalog_input = gui.get_node("catalog_input"),
	}

	gui_lang.set_text_upper(self, self.nodes.title, "_achieves", before_str, after_str)
	gui_lang.set_text_upper(self, self.nodes.loader_title, "_loading_data", before_str, after_str)

	gui_animate.show_bottom(self, self.nodes.wrap , nil)

	self.druid = druid.new(self)
	self.focus_btn_id = nil


	catalog_achieve_functions.render_catalog(self)

	timer.delay(0.1, false, function(self)
		if #self.btns > 0 then
			gui_input.set_focus(self, 1)
		end
		gui_loader.visible(false, node_wrap, node_icon, node_body, self)

	end)
end

function final(self)
	gui_input.on_final(self)
	gui_manager.remove_screen("catalog_achieve", msg.url())
	self.druid:final()
	live_update_atlas.on_final_gui(self)
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	gui_loyouts.on_message(self, message_id, message)
	live_update_atlas.on_message_gui(self, message_id, message, sender)

	if message_id == hash("layout_changed") then
		msg.post("/loader_gui", "reload_gui_component", {id = self.id})

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("set_status") then
		-- Результат покупки
		if message.type == "result_buy" then
			local object = message.value.item
			catalog_achieve_functions.result_buy(self, object)
		end
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)

	self.druid:on_input(action_id, action)

	local function function_back(self)
		msg.post("main:/loader_gui", "visible", {
			id = "inventary_wrap",
			visible = false
		})
	end

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		return true
	end

	return gui_catalog.catalog_input(self, self.id_catalog, action_id, action, self.type, function_activate, function_back)
end

function on_reload(self)

end
