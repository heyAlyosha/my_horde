local druid = require("druid.druid")
local game_content_company = require "main.game.content.game_content_company"
local gui_catalog_company = require "main.gui.modules.gui_catalog_company"
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local gui_animate = require "main.gui.modules.gui_animate"
local gui_manager = require "main.gui.modules.gui_manager"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local sound_render = require "main.sound.modules.sound_render"
local gui_loader = require "main.gui.modules.gui_loader"
local live_update_atlas = require "main.game.live_update.atlas.live_update_atlas"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui_manager.add_screen("catalog_company", msg.url())
	gui.set_render_order(storage_gui.orders.default_screen)

	gui_loader.visible(false, node_wrap, node_icon, node_body, self)

	self.nodes = {
		wrap = gui.get_node("wrap"),
		title = gui.get_node("title"),
		scroll_wrap = gui.get_node("scroll_template/line"),
		scroll_caret = gui.get_node("scroll_template/scroll"),
		btn_close = gui.get_node("btn-close-template/btn"),
		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),
		node_for_clone = gui.get_node("item_template/wrap"),
		catalog_view = gui.get_node("catalog_view"),
		catalog_content = gui.get_node("catalog_content"),
		catalog_input = gui.get_node("catalog_input"),

		btn_quests_all = gui.get_node("btn_quests_all_template/btn_wrap"),
		btn_quests_all_title = gui.get_node("btn_quests_all_template/btn_title"),
		btn_quests_default = gui.get_node("btn_quests_default_template/btn_wrap"),
		btn_quests_default_title = gui.get_node("btn_quests_default_template/btn_title"),
		btn_quests_image = gui.get_node("btn_quests_image_template/btn_wrap"),
		btn_quests_image_title = gui.get_node("btn_quests_image_template/btn_title"),
		btn_quests_music = gui.get_node("btn_quests_music_template/btn_wrap"),
		btn_quests_music_title = gui.get_node("btn_quests_music_template/btn_title"),
	}

	gui_lang.set_text_upper(self, self.nodes.title, "_title_company", before_str, after_str)

	self.id = "catalog_company"
	self.id_catalog = "catalog_companies"

	gui_animate.show_bottom(self, self.nodes.wrap , nil)

	self.druid = druid.new(self)

	self.btns = {
		{id = "close", type = "btn", section = "close", node = self.nodes.btn_close, wrap_node = self.nodes.btn_close_icon, node_title = false, icon = "btn_circle_bg_red_", wrap_icon = "btn_icon_close_"},
		{id = "type_all", type_id = nil, type = "btn", section = "types", node = self.nodes.btn_quests_all, node_title = self.nodes.btn_quests_all_title, icon = "button_default_blue_"},
		{id = "type_default", type_id = "default", type = "btn", section = "types", node = self.nodes.btn_quests_default, node_title = self.nodes.btn_quests_default_title, icon = "button_default_blue_"},
		{id = "type_image", type_id = "image", type = "btn", section = "types", node = self.nodes.btn_quests_image, node_title = self.nodes.btn_quests_image_title, icon = "button_default_blue_"},
		{id = "type_music", type_id = "music", type = "btn", section = "types", node = self.nodes.btn_quests_music, node_title = self.nodes.btn_quests_music_title, icon = "button_default_blue_"},
	}
	self.focus_btn_id = nil

	gui_catalog_company.render_catalog(self, type_id)

	timer.delay(0.1, false, function(self)
		local focus
		if self.category_id then
			for i, btn in ipairs(self.btns) do
				if btn.id == self.category_id then
					focus = i
					break
				end
			end
		end

		if focus then
			local btn = self.btns[focus]
			gui_catalog_company.scroll_to_btn(self, btn)
			gui_input.set_focus(self, focus)
		else
			gui_input.set_focus(self, 6)
		end
	end)
end

function final(self)
	gui_manager.remove_screen("catalog_company", msg.url())
	self.druid:final()
	gui_input.on_final(self)
	live_update_atlas.on_final_gui(self)
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	live_update_atlas.on_message_gui(self, message_id, message, sender)

	gui_loyouts.on_message(self, message_id, message)
	if message_id == hash("layout_changed") then
		msg.post("main:/loader_gui", "reload_gui_component", {id = self.id})

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("hidden") then
		gui_catalog_company.hidden(self)

	elseif message_id == hash("set_content") then
		self.category_id = message.category_id

	elseif message_id == hash("visible") then
		self.category_id = message.category_id

	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	self.druid:on_input(action_id, action)

	self.action_id = action_id
	--pprint(action_id)

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		if self.action_id == hash("touch") then
			
			return
		end
		local btn = self.btns[focus_btn_id]

		gui_animate.activate(self, btn.node)
		sound_render.play("activate_btn", url_object)

		if btn.id == "close" then
			gui_catalog_company.hidden(self)

		elseif btn.section == "types" then
			gui_catalog_company.render_catalog(self, btn.type_id)

		else
			-- Открываем уровни категории 
			gui_catalog_company.activate_category(self, btn.id)

		end
	end

	return gui_catalog_company.catalog_input(self, self.id_catalog, action_id, action, function_activate)
end

function on_reload(self)
	
end
