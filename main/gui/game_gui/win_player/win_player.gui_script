function init(self)
	self.id = "win_player"
	self.nodes = {
		shadow = gui.get_node("shadow")
	}

	self.positions_cloud = {}

	-- Затемнение
	gui.set_alpha(self.nodes.shadow, 0)


	-- Облака и грозы
	for i = 1, 3 do
		self.nodes["cloud"..i] = gui.get_node("cloud"..i)
		self.nodes["lightning"..i] = gui.get_node("lightning"..i)

		local node_cloud = self.nodes["cloud"..i]
		local node_lightning = self.nodes["lightning"..i]

		-- Стартовое рамоложение
		self.positions_cloud[i] = gui.get_position(node_cloud)

		-- Отключаем молнии и облака
		gui_loyouts.set_enabled(self, node_lightning, false)
		gui.set_alpha(node_cloud, 0)

		local position = gui.get_position(node_cloud)

		-- Раздвигаем облака
		if i == 1 then
			position.x = position.x - 300
			gui.set_position(node_cloud, position)
		elseif i == 3 then
			position.x = position.x + 300
			gui.set_position(node_cloud, position)
		end
	end

	-- Анимация появления облаков
	self.delay_animation = 0.5
	self.duration = 0.25
	gui.animate(self.nodes.shadow, "color.w", 0.5, gui.EASING_LINEAR, self.duration)
	timer.delay(self.delay_animation, false, function (self)
		for i = 1, 3 do
			local node_cloud = self.nodes["cloud"..i]

			gui.animate(node_cloud, "position", self.positions_cloud[i], gui.EASING_OUTCUBIC, self.duration)
			gui.animate(node_cloud, "color", vmath.vector4(1), gui.EASING_LINEAR, self.duration)

			--Анимация плавания облаков
			timer.delay(self.duration, false, function (self)
				local position_y = self.positions_cloud[i].y
				if i == 1 then
					position_y = position_y + 3
				elseif i == 2 then
					position_y = position_y - 6
				else
					position_y = position_y - 3
				end
				gui.animate(node_cloud, "position.y", position_y, gui.EASING_LINEAR, 5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
			end)
		end
	end)

	-- Анимация грозы
	self.duration_lightning = 0.1
	self.timer_lightning = timer.delay(1, true, function (self)
		local lightning_sprite = {"lightning_2", "lightning_3"}
		for i = 1, 3 do
			math.randomseed(i)
			if math.random(0, 1) == 1 then
				local node_lightning = self.nodes["lightning"..i]
				local sprite = lightning_sprite[math.random(1, 2)]
				gui.set_enabled(node_lightning, true)
				gui.play_flipbook(node_lightning, sprite)
				gui.set_color(self.nodes.shadow, vmath.vector4(0, 0, 0, 0.3))

				timer.delay(self.duration_lightning/2, false, function (self)
					if math.random(0, 1) == 1 then
						timer.delay(self.duration_lightning/2, false, function (self)
							if sprite == 1 then
								sprite = lightning_sprite[2]
							else 
								sprite = lightning_sprite[1]
							end

							gui.play_flipbook(node_lightning, sprite)

							timer.delay(self.duration_lightning/2, false, function (self)
								gui.set_enabled(node_lightning, false)
								gui.set_color(self.nodes.shadow, vmath.vector4(0, 0, 0, 0.5))
							end)
						end)
					else
						gui.set_enabled(node_lightning, false)
						gui.set_color(self.nodes.shadow, vmath.vector4(0, 0, 0, 0.5))
					end
				end)
			end
		end
	end)

	timer.delay(2, false, function (self)
		--msg.post(".", hash("hidden"))
	end)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("hidden") then
		-- Скрытие анимации
		timer.cancel(self.timer_lightning)
		gui.animate(self.nodes.shadow, "color.w", 0, gui.EASING_LINEAR, self.duration)

		-- Скрытие облаков
		for i = 1, 3 do
			local node_cloud = self.nodes["cloud"..i]
			gui.animate(node_cloud, "color.w", 0, gui.EASING_LINEAR, self.duration)

			local position_x = self.positions_cloud[i].x
			if i == 1 then
				gui.animate(node_cloud, "position.x", position_x - 300, gui.EASING_LINEAR, self.duration, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
			elseif i == 3 then
				gui.animate(node_cloud, "position.x", position_x + 300, gui.EASING_LINEAR, self.duration, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
			end
			
			timer.delay(self.duration, false, function (self)
				msg.post("/loader_gui", "visible", {
					id = self.id,
					visible = false,
				})
			end)
		end
	end
end
