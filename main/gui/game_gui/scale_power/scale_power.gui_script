local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local gui_scale = require "main.gui.modules.gui_scale"
local gui_animate = require "main.gui.modules.gui_animate" 
local game_content_wheel = require "main.game.content.game_content_wheel"
local scale_power_functions = require "main.gui.game_gui.scale_power.functions.scale_power_functions"
local gui_lang = require "main.lang.gui_lang"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(3)

	self.id = "scale_power"

	self.nodes = {
		wrap = gui.get_node("wrap"),
		title = gui.get_node("title"),
		wrap_scale = gui.get_node("wrap_scale"),
		btn = gui.get_node("btn_template/btn_wrap"),
		btn_title = gui.get_node("btn_template/btn_title"),
	}

	gui_lang.set_text_upper(self, self.nodes.title, "_aim_and_spin", before_str, "!")
	gui_lang.set_text_upper(self, self.nodes.btn_title, "_spinning_wheel", before_str, "")

	-- Кнопка "Крутить барабан"
	self.btns = {
		{
			id = "go", 
			type = "btn",
			section = "wheel",
			node = self.nodes.btn,
			node_title = self.nodes.btn_title,
			icon = "button_default_green_"
		}
	}

	timer.delay(0.2, false, function(self)
		gui_input.set_focus(self, 1)
	end)
end

function final(self)
	gui_input.on_final(self)
end

function update(self, dt)
	-- Запоминаем место кнопки
	storage_gui.positions[self.id] = storage_gui.positions[self.id] or {}
	storage_gui.positions[self.id].btn = gui.get_screen_position(self.nodes.btn)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	if message_id == hash("layout_changed") then
		--msg.post("/loader_gui", "reload_gui_component", {id = self.id})
		scale_power_functions.visible(self, self.data)

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") then
		self.data = message.value
		scale_power_functions.visible(self, self.data)

	elseif message_id == hash("hidden") then
		scale_power_functions.hidden(self)
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)

	if storage_gui.components_visible.modal_pause then
		return true
	end
	
	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		local btn = self.btns[focus_btn_id]
		gui_animate.activate(self, self.btns[focus_btn_id].node, nil)

		scale_power_functions.activate(self)
	end

	if self.focus_btn_id == 1 and action_id == hash("up")  and action.pressed then
		if storage_gui.components_visible.interface then
			msg.post(storage_gui.components_visible.interface, "focus", {focus = 1})
			msg.post("main:/sound", "play", {sound_id = "focus_main_menu"})
			return
		end

	elseif action_id == hash("action") and action.pressed then
		scale_power_functions.activate(self)

	end

	local function function_back(self)
	end

	return gui_input.on_input(self, action_id, action, function_focus, function_activate, function_back)
end