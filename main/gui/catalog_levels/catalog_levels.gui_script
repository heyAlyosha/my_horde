local druid = require("druid.druid")
local game_content_levels = require "main.game.content.game_content_levels"
local gui_catalog_levels = require "main.gui.modules.gui_catalog_levels"
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local gui_animate = require "main.gui.modules.gui_animate"
local gui_manager = require "main.gui.modules.gui_manager"
local api_player = require "main.game.api.api_player"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local core_prorgress = require "main.core.core_progress.core_prorgress"
local gui_loader = require "main.gui.modules.gui_loader"
local sound_render = require "main.sound.modules.sound_render"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui_manager.add_screen("catalog_levels", msg.url())
	gui.set_render_order(storage_gui.orders.default_screen)

	self.id = "catalog_levels"
	self.id_catalog = self.id

	self.nodes = {
		wrap = gui.get_node("wrap"),
		title = gui.get_node("title"),
		scroll_wrap = gui.get_node("scroll_template/line"),
		scroll_caret = gui.get_node("scroll_template/scroll"),
		btn_close = gui.get_node("btn-close-template/btn"),
		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),
		node_for_clone = gui.get_node("item_template/wrap"),
		catalog_view = gui.get_node("catalog_view"),
		catalog_content = gui.get_node("catalog_content"),
		catalog_input = gui.get_node("catalog_input"),
	}

	gui_lang.set_text_upper(self, self.nodes.title, "_title_levels", before_str, after_str)

	self.druid = druid.new(self)
	self.category_id = ""
	gui_loader.visible(true, node_wrap, node_icon, node_body, self)

	gui_animate.show_bottom(self, self.nodes.wrap , function (self)
		gui_loader.visible(false, node_wrap, node_icon, node_body, self)
		gui_catalog_levels.visible(self, message)
	end)

end

function final(self)
	gui_manager.remove_screen("catalog_levels", msg.url())
	self.druid:final()
	gui_input.on_final(self)
	
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)

	gui_loyouts.on_message(self, message_id, message)
	if message_id == hash("layout_changed") then
		msg.post("/loader_gui", "reload_gui_component", {
			id = self.id,
			reload = true,
			category_id = self.category_id,
			focus_card = (self.focus_btn_id or 3) - 1
		})

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("hidden") then
		self.reload = message.reload
		gui_catalog_levels.hidden(self)

	elseif message_id == hash("set_content") or (message_id == hash("visible") and message.reload) then
		self.focus_card = message.focus_card
		self.category_id = message.category_id

	elseif message_id == hash("visible") and message.visible then
		self.focus_card = message.focus_card
		self.category_id = message.category_id

	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	self.druid:on_input(action_id, action)

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		local btn = self.btns[focus_btn_id]

		gui_animate.activate(self, btn.node)

		msg.post("main:/sound", "play", {sound_id = "activate_btn"})

		if btn.id == "close" then
			gui_catalog_levels.close(self)
		elseif btn.is_card and btn.is_play then
			msg.post("game-room:/core_game", "start_company_level", {category_id = self.category_id, level_id = btn.id})
		end
	end

	return gui_catalog_levels.catalog_input(self, self.id_catalog, action_id, action, function_activate)
end

function on_reload(self)

end
