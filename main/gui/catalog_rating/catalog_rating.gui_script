local druid = require("druid.druid")
local game_content_levels = require "main.game.content.game_content_levels"
local game_content_text = require "main.game.content.game_content_text"
local catalog_rating_render = require "main.gui.catalog_rating.modules.catalog_rating_render"
local catalog_rating_render_default = require "main.gui.catalog_rating.modules.catalog_rating_render_default"
local catalog_rating_render_change_animated = require "main.gui.catalog_rating.modules.catalog_rating_render_change_animated"
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local gui_animate = require "main.gui.modules.gui_animate"
local gui_manager = require "main.gui.modules.gui_manager"
local gui_loader = require "main.gui.modules.gui_loader"
local timer_linear = require "main.modules.timer_linear"
local api_player = require "main.game.api.api_player"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local nakama = require "nakama.nakama"
local loader_gui_history = require "main.loaders.loader_gui.modules.loader_gui_history"

function init(self)
	gui.set_render_order(storage_gui.orders.modal)
	msg.post(".", "acquire_input_focus")
	gui_manager.add_screen("catalog_rating", msg.url())

	self.id = "catalog_rating"
	self.is_modal = true

	self.nodes = {
		title = gui.get_node("title"),
		wrap = gui.get_node("wrap"),
		scroll_wrap = gui.get_node("scroll_template/line"),
		scroll_caret = gui.get_node("scroll_template/scroll"),
		btn_close = gui.get_node("btn-close-template/btn"),
		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),

		wrap_tabs = gui.get_node('btns_wrap'),
		btn_top_type_rating = gui.get_node("top_tab_template/btn_wrap"),
		btn_top_type_rating_title = gui.get_node("top_tab_template/btn_title"),
		btn_personal_type_rating = gui.get_node("personal_tab_template/btn_wrap"),
		btn_personal_type_rating_title = gui.get_node("personal_tab_template/btn_title"),
		btn_yandex_type_rating = gui.get_node("yandex_tab_template/btn_wrap"),
		btn_yandex_type_rating_title = gui.get_node("yandex_tab_template/btn_title"),

		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),
		node_for_clone = gui.get_node("item_template/wrap"),
		catalog_view = gui.get_node("catalog_view"),
		catalog_content = gui.get_node("catalog_content"),
		catalog_input = gui.get_node("catalog_input"),

		loader_wrap = gui.get_node("loader_template/loader_wrap"),
		loader_icon = gui.get_node("loader_template/loader_icon"),
		loader_text = gui.get_node("loader_template/loader_text"),
	}

	self.druid = druid.new(self)
	gui_lang.set_text(self, gui.get_node("loader_template/loader_text"), "_loading_gamers")

	-- Анимированный или обычный рейтинг 
	self.type_catalog = "default"
	
	self.id_catalog = "catalog_rating"
	self.focus_btn_id = nil
	self.is_bg = true

	--  Устанавливаем кнопки
	self.btns = {
		{id = "close", type = "btn", section = "close", node = self.nodes.btn_close, wrap_node = self.nodes.btn_close_icon, node_title = false, icon = "btn_circle_bg_red_", wrap_icon = "btn_icon_close_",},
	}

	-- ВКЛЮЧЕНИЕ РЕЖИМОВ
	if self.type_catalog == "default" then
		

	elseif self.type_catalog == "change_animated" then
		

	end
end

function final(self)
	gui_input.on_final(self)
	gui_manager.remove_screen("catalog_rating", msg.url())

	msg.post("/loader_gui", "visible", {
		id = "bg",
		visible = false,
		parent_id = self.id,
		type = hash("animated_close"),
	})

	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("layout_changed") then
		--Сменилась ориентация
		if self.type_rating == "top" then
			catalog_rating_render.clear_catalog(self)
			catalog_rating_render_default.render(self, self.type_default_rating)

		elseif self.type_rating == "change_animated" then
			if message_id == hash("layout_changed") then
				msg.post("/loader_gui", "visible", {id = "bg", visible = false, parent_id = self.id})
				msg.post("/loader_gui", "visible", {id = "bg", visible = true, parent_id = self.id})

				loader_gui_history.refresh_msg(self, self.id, "all")
				gui.set_enabled(self.nodes.btn_wrap, false)
			end
		end
		
	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") then
		local value = message.value or {}

		self.hidden_bg = value.hidden_bg
		self.type_rating = value.type_rating

		-- Обновляем рейтинг игрока
		local update_inteface = true
		api_player.get_rating(self, update_inteface)

		if self.type_rating == 'top' then
			gui_animate.show_bottom(self, self.nodes.wrap , function (self)
				
			end)

			self.type_default_rating = value.type_default_rating
			catalog_rating_render_default.start(self, self.type_default_rating)

		elseif self.type_rating == "change_animated" then
			gui_animate.show_bottom(self, self.nodes.wrap , function (self)

				catalog_rating_render_change_animated.start(self)
			end)
		end

		if not self.hidden_bg then
			msg.post("/loader_gui", "visible", {
				id = "bg",
				parent_id = self.id,
				visible = true,
				value = {order = 4},
				type = hash("animated_close"),
			})
		end

	elseif message_id == hash("hidden") then
		gui_animate.hidden_bottom(self, self.nodes.wrap , function (self)
			msg.post("/loader_gui", "visible", {
				id = "catalog_rating",
				visible = false,
			})
		end)
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	self.druid:on_input(action_id, action)

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		local btn = self.btns[focus_btn_id]

		gui_animate.activate(self, btn.node)
		msg.post("main:/sound", "play", {sound_id = "activate_btn"})

		if btn.id == "close" then
			msg.post("/loader_gui", "visible", {
				id = "catalog_rating",
				visible = false,
				type = hash("animated_close"),
			})

		elseif btn.id == "top" or btn.id == "sdk" or btn.id == "personal" then
			if self.type_default_rating ~= btn.id then
				self.type_default_rating = btn.id
				catalog_rating_render_default.render(self, self.type_default_rating)
			end

		end
	end

	return catalog_rating_render.catalog_input(self, self.id_catalog, action_id, action, function_activate)
end

function on_reload(self)

end
