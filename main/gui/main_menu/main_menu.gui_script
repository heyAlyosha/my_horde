local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local storage_sdk = require "main.storage.storage_sdk"
local gui_manager = require "main.gui.modules.gui_manager"
local gui_animate = require "main.gui.modules.gui_animate"
local sound_render = require "main.sound.modules.sound_render"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local nakama = require "nakama.nakama"
local api_core_rating = require "main.core.api.api_core_rating"
local api_player = require "main.game.api.api_player"
local loader_sdk_modules = require "main.loaders.loader_sdk.modules.loader_sdk_modules"
local main_menu_functions = require "main.gui.main_menu.main_menu_functions"
local input_remote_tv = require "input.input_remote_tv.modules.input_remote_tv"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(3)
	gui_manager.add_screen("main_menu", msg.url())

	self.nodes = {
		btn_play_wrap = gui.get_node("btn_play_template/btn_wrap"),
		btn_play_title = gui.get_node("btn_play_template/btn_title"),
		btn_play_family_wrap = gui.get_node("btn_play_family_template/btn_wrap"),
		btn_play_family_title = gui.get_node("btn_play_family_template/btn_title"),
		btn_trophy_wrap = gui.get_node("btn_trophy_template/btn_wrap"),
		btn_trophy_title = gui.get_node("btn_trophy_template/btn_title"),
		btn_rating_wrap = gui.get_node("btn_rating_template/btn_wrap"),
		btn_rating_title = gui.get_node("btn_rating_template/btn_title"),
		btn_exit_wrap = gui.get_node("btn_exit_template/btn_wrap"),
		btn_exit_title = gui.get_node("btn_exit_template/btn_title"),

		login_wrap = gui.get_node("login_wrap"),
		login_description = gui.get_node("login_description"),
		btn_login_wrap = gui.get_node("btn_login_template/btn_wrap"),
		btn_login_title = gui.get_node("btn_login_template/btn_title"),
	}

	main_menu_functions.render(self)

	self.focus_btn_id = nil

	timer.delay(0.1, false, function(self)
		gui_input.set_focus(self, 1)
	end)

	gui_animate.pulse_loop(self, self.nodes.btn_play_wrap, 2)

	--api_player.update_prizes(self, "set", {ipad = 22, iphone = 14})
	--[[
	msg.post("/loader_gui", "visible", {
		id = "catalog_characteristic",
		visible = true,
	})
	--]]

end

function final(self)
	gui_input.on_final(self)
	gui_manager.remove_screen(msg.url())
end


function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message.type == "update" then
		main_menu_functions.render(self)

	elseif message_id == hash("hidden") then
		msg.post("/loader_gui", "visible", {
			id = "main_menu", visible = false
		})
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	--msg.post("main:/print", "print", {text = action_id})

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		local btn = self.btns[focus_btn_id]

		gui_animate.activate(self, btn.node, function_after)
		sound_render.play("activate_btn")
		if btn.id == "trophy" then
			msg.post("/loader_gui", "visible", {
				id = "catalog_inventary",
				visible = true,
				modal = false, -- Не открывается обёртка инвентаря
				-- Кнопка внизу
				btn_smart = {
					type = "message",
					title_id = "_to_buy",
					message_url = "main:/loader_gui",
					message_id = "visible",
					message = {
						id = "catalog_shop",
						visible = true,
						-- Кнопка внизу
						btn_smart = self.btn_smart,
					},
				},
			})

		elseif btn.id == "rating" then
			msg.post("/loader_gui", "visible", {
				id = "catalog_rating",
				visible = true,
				type = hash("animated_close"),
				value = {
					type_rating = 'top',
					type_default_rating = 'top',
				}
			})

		elseif btn.id == "play" then
			msg.post("/core_screens", "catalog_company", {})

		elseif btn.id == "play_family" then
			msg.post("/core_screens", "constructor_family", {})

		elseif btn.id == "login" then
			loader_sdk_modules.logout.open_auth_window(self)

		elseif btn.id == "exit" then
			msg.post("/loader_gui", "visible", {
				id = "modal_exit",
				visible = true,
				type = hash("animated_close"),
			})
			
		end
	end

	if self.focus_btn_id == 1 and action_id == hash("up")  and action.pressed then
		if storage_gui.components_visible.interface then
			msg.post(storage_gui.components_visible.interface, "focus", {focus = 1})
			sound_render.play("focus_main_menu")
		end

		return
	end

	local function function_back(self)
		if storage_sdk.stats.is_exit then
			msg.post("/loader_gui", "visible", {
				id = "modal_exit",
				visible = true,
				type = hash("animated_close"),
			})
		end
		return
	end

	return gui_input.on_input(self, action_id, action, function_focus, function_activate, function_back)

end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
