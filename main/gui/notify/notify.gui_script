local druid = require("druid.druid")
local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local notify_functions = require "main.gui.notify.modules.notify_functions"
local gui_manager = require "main.gui.modules.gui_manager"
local gui_animate = require "main.gui.modules.gui_animate"
local timer_linear = require "main.modules.timer_linear"
local sound_render = require "main.sound.modules.sound_render"
local gui_loyouts = require "main.gui.modules.gui_loyouts"
local gui_lang = require "main.lang.gui_lang"
local RichText = require("druid.custom.rich_text.rich_text")
local live_update_atlas = require "main.game.live_update.atlas.live_update_atlas"

function init(self)
	msg.post(".", "acquire_input_focus")
	self.component_id = "notify"
	self.id = self.component_id
	--self.is_modal = true
	gui_manager.add_screen("notify", msg.url())
	gui.set_render_order(storage_gui.orders.notify)

	self.nodes = {
		wrap = gui.get_node("wrap"),
		wrap_bg = gui.get_node("wrap_bg"),
		wrap_btns = gui.get_node("wrap_btns"),
		animation_wrap_bg = gui.get_node("animation_wrap_bg"),
		animation_icon = gui.get_node("animation_icon"),
		btn_close = gui.get_node("btn-close-template/btn"),
		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),
		btn = gui.get_node("main_btn_template/btn_wrap"),
		btn_title = gui.get_node("main_btn_template/btn_title"),
		title = gui.get_node("title"),
		description = gui.get_node("description"),
		wrap_icon = gui.get_node("wrap_icon"),
		icon = gui.get_node("icon"),
		progress_wrap = gui.get_node("progress_bar_template/wrap"),
		progress_line = gui.get_node("progress_bar_template/line"),
		progress_number = gui.get_node("progress_bar_template/number"),
		loader_img = gui.get_node("loader_icon_template/loader_icon"),
	}

	self.druid = druid.new(self)

	self.not_remove_other_focus = true

	self.btns = {
		{id = "close", type = "btn", section = "close", node = self.nodes.btn_close, wrap_node = self.nodes.btn_close_icon, node_title = false, icon = "btn_circle_bg_red_", wrap_icon = "btn_icon_close_",},
	}

	self.last_input_element = storage_gui.focus_input_component
	self.last_focus_input_index_btn = storage_gui.focus_input_index_btn
end

function final(self)
	gui_input.on_final(self)
	live_update_atlas.on_final_gui(self)
	if self.last_input_element then
		-- Фокус на прежний компонент
		msg.post("/loader_gui", "focus", {
			id = self.last_input_element, -- id компонента в лоадер гуи
			focus = self.last_focus_input_index_btn -- кнопка фокуса
		})
	end

	gui_manager.remove_screen("notify", msg.url())

	self.druid:final()
	gui_input.on_final(self)
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
	gui_loyouts.on_message(self, message_id, message)
	live_update_atlas.on_message_gui(self, message_id, message, sender)

	if message_id == hash("visible") and message.visible then
		notify_functions.visible(self, message.type, message.data)

	elseif message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("layout_changed") then
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	self.druid:on_input(action_id, action)

	if timer_linear.on_input(self, action_id, action) then
		return true
	end

	if self.animate_visible then
		return true
	end

	-- Нажатие на кнопки
	local function function_activate(self, focus_btn_id)
		local btn = self.btns[focus_btn_id]

		gui_animate.activate(self, btn.node)
		sound_render.play("activate_btn", url_object)

		if action_id == hash("back") and action.pressed then
			notify_functions.hidden(self, function_end)

		elseif btn.id == "close" then
			notify_functions.hidden(self)

		elseif btn.id == "shop" then
			msg.post("main:/loader_gui", "visible", {
				id = "catalog_shop",
				visible = true,
			})
			notify_functions.hidden(self, function (self)
			end)

		end
	end

	local function function_back(self)
		msg.post("main:/loader_gui", "visible", {
			id = "study",
			visible = false
		})

		sound_render.play("activate_btn", url_object)
		notify_functions.hidden(self, function_end)
	end


	--[[
	-- Клик или тач вне окна уведомления 
	if gui_input.is_touch(self, action_id, action) and not gui.pick_node(self.nodes.wrap_bg, action.x, action.y) then
		function_back(self)
	end
	]]--
	-- Клик куда угодно кроме кнопок
	if gui_input.is_touch(self, action_id, action) then
		local btn_pick
		for i, btn in ipairs(self.btns) do
			if gui.pick_node(btn.node, action.x, action.y) then
				btn_pick = true
				break
			end
		end

		if not btn_pick then
			function_back(self)
		end
	end

	if gui_input.on_input(self, action_id, action, function_focus, function_activate, function_back, function_post_focus) then
		return true
	end

	if action.x and action.y and gui.pick_node(self.nodes.wrap_bg, action.x, action.y) then
		return true
	end
	
end

function on_reload(self)

end
