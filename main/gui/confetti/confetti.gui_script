local color = require("color-lib.color")
local gui_input = require "main.gui.modules.gui_input"

-- функция добавления конфетти
function add_confetti(self)
	local node = gui.clone(self.nodes.confetti)
	local start_x = math.random(0, gui.get_size(self.nodes.wrap).x)
	local start_y = gui.get_size(self.nodes.wrap).y
	local end_x = start_x
	local end_y = 0
	local duration = math.random(5, 9)
	local rotation = math.random(1, 360)
	local colors = {color.lime, color.chartreuse, color.fuchsia, color.violet, color.aqua, color.yellow}

	-- Определяем какой план
	local plan = math.random(0, 100) / 100
	local scale = 1.5 - 0.5 * plan
	duration = duration - (1 * plan)

	gui.set_enabled(node, true)
	gui.set_position(node, vmath.vector3(start_x, start_y, 1))
	gui.set_scale(node, vmath.vector3(scale))
	gui.set_rotation(node, vmath.vector3(0,0, rotation))
	gui.set_color(node, colors[math.random(1, #colors)])

	-- Анимируем
	gui.animate(node, "rotation.z", rotation + math.random(100, 270), gui.EASING_LINEAR, math.random(1, 6), 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	gui.animate(node, "position", vmath.vector3(end_x, end_y, 1), gui.EASING_LINEAR, duration, 0, function (self)
		gui.delete_node(node)
	end)

	gui.animate(node, "color.w", 0, gui.EASING_LINEAR, 0.5, duration - 0.5)
	
	
end

function init(self)
	gui.set_render_order(2)

	self.nodes = {
		wrap = gui.get_node("wrap"),
		confetti = gui.get_node("confetti"),
	}

	gui.set_enabled(self.nodes.confetti, false)
end

function final(self)
	gui_input.on_final(self)
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	if message_id == hash("visible") then
		if self.timer_delete then
			timer.cancel(self.timer_delete)
		end
		self.render_timer = timer.delay(0.05, true, function (self)
			add_confetti(self)
		end)

	elseif message_id == hash("hidden") then
		timer.cancel(self.render_timer)
		self.timer_delete = timer.delay(10, false, function (self)
			msg.post("/loader_gui", "visible", {
				id = "confetti",
				visible = false,
			})
		end)
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
