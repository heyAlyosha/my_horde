local gui_input = require "main.gui.modules.gui_input"
local storage_gui = require "main.storage.storage_gui"
local keyboard_functions = require "main.gui.keyboard.functions.keyboard_functions"
-- Адаптирвоанный интерфейс
local gui_loyouts = require "main.gui.modules.gui_loyouts"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_render_order(storage_gui.orders.keyboard)
	self.id = "keyboard_ru"

	self.nodes = {
		wrap = gui.get_node("wrap"),
		wrap_bg = gui.get_node ("wrap_bg"),
		wrap_btns = gui.get_node("wrap_btns"),
		btn_close = gui.get_node("btn-close-template/btn"),
		btn_close_icon = gui.get_node("btn-close-template/btn_icon"),

		btn_word = gui.get_node("btn_word_template/btn_wrap"),
		btn_word_title = gui.get_node("btn_word_template/btn_title"),
		btn_refresh = gui.get_node("btn_refresh_template/btn_wrap"),
		btn_refresh_title = gui.get_node("btn_refresh_template/btn_title"),
		btn_surrender = gui.get_node("btn_surrender_template/btn_wrap"),
		btn_surrender_title = gui.get_node("btn_surrender_template/btn_title"),
	}

	self.btns = {}

end

function update(self, dt)
	storage_gui.positions[self.id] = storage_gui.positions[self.id] or {}
end

function final(self)
	gui_input.on_final(self)

	msg.post("main:/loader_gui", "visible", {
		id = "study",
		visible = false
	})
end

function on_message(self, message_id, message, sender)
	input_remote_tv.on_message(self, message_id, message, sender)
	gui_loyouts.on_message(self, message_id, message)

	if message_id == hash("focus") then
		gui_input.set_focus(self, message.focus)

	elseif message_id == hash("visible") then
		local data = message.value or {}
		self.player_id = message.value.player_id
		keyboard_functions.visible(self, data)

	elseif message_id == hash("layout_changed") then
			-- Если обучение
			-- Скрыть
			msg.post("main:/loader_gui", "visible", {
				id = "study",
				visible = false
			})
			if self.btn_touch_node then
				timer.delay(0.25, false, function (self)
					msg.post("main:/loader_gui", "set_status", {
						id = "study",
						type = "set_items",
						timeline = {
							{
								type = "touch",
								position_end = gui.get_screen_position(self.btn_touch_node)
							}
						}
					})
				end)
			end

	elseif message_id == hash("hidden") then
		keyboard_functions.hidden(self)

	elseif message_id == hash("set_status") then
		if message.type == "activate_symbol" then
			local data = message.value
			local symbol = utf8.lower(data.symbol)

			for i, btn in ipairs(self.btns) do
				if keyboard_functions.get_symbol(btn) == symbol then
					keyboard_functions.activate_btn(self, i)
					return
				end
			end
		elseif message.type == "result" then
			keyboard_functions.result(self, self.activate_btn, message.value.type)

			timer.delay(5, false, function (self)
				--keyboard_functions.hidden(self)
				msg.post("/loader_gui", "visible", {
					id = "keyboard_ru",
					visible = false,
					type = hash("animated_close"),
					value = {
						is_player = true,
						keys_disabled = {"Й", "Я", "с"}
					}
				})
			end)
		elseif message.type == "study_touch" then
			-- Показать курсор 
			keyboard_functions.study_touch(self)
		end
	end
end

function on_input(self, action_id, action)
	action_id, action = input_remote_tv.on_input(self, action_id, action)
	if storage_gui.components_visible.modal_pause then
		return true
	end

	if self.activate_btn or self.disabled then
		return false
	end

	if self.focus_btn_id and action_id == hash("up")  and action.pressed then
		local btn = self.btns[self.focus_btn_id]

		if storage_gui.components_visible.game_word and btn.section == "line_1" then
			msg.post(storage_gui.components_visible.game_word, "focus", {focus = 2})
			msg.post("main:/sound", "play", {sound_id = "focus_main_menu"})
			return

		elseif storage_gui.components_visible.interface and btn.section == "line_1" then
			msg.post(storage_gui.components_visible.interface, "focus", {focus = 1})
			msg.post("main:/sound", "play", {sound_id = "focus_main_menu"})
			return
		end
	end

	if self.type == "input" then
		--return true
	end

	function function_back(self)
		if self.type == "input" then
			-- Закрытие
			msg.post("/loader_gui", "visible", {
				id = self.id,
				visible = false,
			})
			msg.post("main:/sound", "play", {sound_id = "activate_btn"})
		end
	end

	return gui_input.on_input(self, action_id, action, function_focus, keyboard_functions.activate_btn, function_back)
end