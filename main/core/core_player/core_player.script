local storage_player = require "main.storage.storage_player"
local core_player_function = require "main.core.core_player.modules.core_player_function"
local api_core_player = require "main.core.api.api_core_player"
local api_player = require "main.game.api.api_player"
local api_core_shop = require "main.core.api.api_core_shop"
local game_content_artifact = require "main.game.content.game_content_artifact"

function init(self)

end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash('balance') then
		-- Обновление баланса
		local operation = message.operation or 'set'
		local values = message.values or {}
		local animate = message.animate or true
		core_player_function.update_balance(self, operation, values, animate)

	elseif message_id == hash('set_name') then
		-- Изменение имени
		api_player.set_name(self, message.name or name)

	elseif message_id == hash('save_settings') then
		api_player.save_settings(self, message, function (self, result)
			
		end)

	elseif message_id == hash("set_characteristic") then
		local operation = message.operation
		local value = message.value
		local id = message.id
		local set_nakama = true
		local result = api_core_player.set_characteristic(self, id, operation, value, set_nakama, function (self)
			msg.post("/core_achieve", "update_progress")
		end)

		-- Определяем какому компоненту отсылать
		local id_component = "modal_characteristics"
		-- Если это не модальное окно, значит это каталог в инвентаре
		if message.not_modal then
			id_component = "catalog_characteristic"
		end

		if result then
			msg.post("/loader_gui", "set_status", {
				id = id_component,
				type = "success_up",
				value = {
					id = id
				}
			})
		end

	elseif message_id == hash("sell") then
		-- Продаём на стороне пользователя
		local id = message.id
		local type = message.type
		local count = message.count
		api_core_player.sell(self, id, type, count)

	elseif message_id == hash("buy") then
		-- Продаём на стороне пользователя
		local id = message.id
		local type = message.type
		local count = message.count
		api_core_shop.buy(self, id, type, count, game_content_artifact)

	elseif message_id == hash("upgrade")  then
		-- Улучшение
		local upgrade_id = message.upgrade_id
		local upgrade_value = message.upgrade_value
		local price = message.price
		local operation = message.operation or "set"
		api_core_player.upgrade(self, operation, upgrade_id, upgrade_value, price, sender)

	end
end

function on_input(self, action_id, action)
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
