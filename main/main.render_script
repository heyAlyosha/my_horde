local storage_gui = require "main.storage.storage_gui"
local storage_player = require "main.storage.storage_player"
local camera = require "orthographic.camera"

--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
    storage_player.camera_zoom = zoom
    storage_player.window_width = render.get_window_width()
    storage_player.window_height = render.get_window_height()
    
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    -- Сохраняем размеры камеры
    storage_player.camera_projected_width = projected_width
    storage_player.camera_projected_height = projected_height

    -- Если есть улучшения масштаба у игрока
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2

    storage_player.camera_xoffset = xoffset
    storage_player.camera_yoffset = yoffset

    if not camera then
        return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)

    else
        for _,camera_id in ipairs(camera.get_cameras()) do
            local viewport = camera.get_viewport(camera_id)
            local view = camera.get_view(camera_id)
            local projection = camera.get_projection(camera_id)

            render.set_viewport(viewport.x, viewport.y, viewport.z, viewport.w)
            render.set_view(view)
            render.set_projection(projection)

        end
    end
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
    -- Определяем ориента
    local orientation
    if render.get_window_height() >= render.get_window_width() then
        orientation = "vertical"
    else
        orientation = "horisontal"
    end 

    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()

    local zoom

    -- Ловим вертикальную ориентацию устройства
    if render.get_window_width() < render.get_window_height() then
        -- Вертикальная ориентация
        storage_player.orientation = "vertical"
        width = render.get_height()
        height = render.get_width()
        zoom = window_width / width
        
    else
        -- Горизонтальная ориентация
        storage_player.orientation = "horisontal"
        zoom = math.min(window_width / width, window_height / height)
    end

    return fixed_projection(near, far, zoom)
end

local function screen_to_world(x, y, z)
    local inv = vmath.inv(self.projection * self.view)
    x = (2 * x / render.get_width()) - 1
    y = (2 * y / render.get_height()) - 1
    z = (2 * z) - 1
    local x1 = x * inv.m00 + y * inv.m01 + z * inv.m02 + inv.m03
    local y1 = x * inv.m10 + y * inv.m11 + z * inv.m12 + inv.m13
    local z1 = x * inv.m20 + y * inv.m21 + z * inv.m22 + inv.m23
    return x1, y1, z1
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
    return self.projection_fn(self.near, self.far, self.zoom)
end

function init(self)

    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})
    
    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    -- default is stretch projection. copy from builtins and change for different projection
    -- or send a message to the render script to change projection:
    -- msg.post("@render:", "use_stretch_projection", { near = -1, far = 1 })
    -- msg.post("@render:", "use_fixed_projection", { near = -1, far = 1, zoom = 2 })
    -- msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
    self.near = -1000
    self.far = 1000
    self.projection_fn = stretch_projection
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(get_projection(self))

    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    -- render models
    --
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)
    render.draw(self.model_pred)

    -- debug rendering
    --
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE)    
    render.draw_debug3d()
    
    -- render GUI
    --
    render.set_view(vmath.matrix4())
    --render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), self.near, self.far))
    

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("use_camera_projection") then
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = stretch_projection

    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection

    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection

    elseif message_id == hash("window_resized") then
        -- Отправляем, что окно изменилось
        for id, url in pairs(storage_gui.components_visible) do
            msg.post(url, "window_resize", {width = render.get_window_width(), height = render.get_window_height()})
        end

        msg.post("game-room:/leader", "window_resize", {width = render.get_window_width(), height = render.get_window_height()})
        msg.post("main:/camera", "window_resize", {width = render.get_window_width(), height = render.get_window_height()})

    end
end
