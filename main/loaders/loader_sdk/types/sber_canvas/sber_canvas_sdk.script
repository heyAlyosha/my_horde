local storage_sdk = require "main.storage.storage_sdk"
local nakama = require "nakama.nakama"
local json = require "nakama.util.json"
local sber_canvas_sdk_logout = require "main.loaders.loader_sdk.types.sber_canvas.modules.sber_canvas_sdk_logout"
local loader_sdk_rpc = require "main.loaders.loader_sdk.modules.loader_sdk_rpc"
local loader_sdk_modules = require "main.loaders.loader_sdk.modules.loader_sdk_modules"
--local screen_content = require "main.content.screen.screen_content"
--local gui_global_loader_donate = require "main.gui.global.gui_global_loader_donate"

-- Прослушиваем события
local function js_listener(self, message_id, message)
	
	if message_id == "KeyPressed" then
		-- Нажатие клавиши
		if message.type == "back" then
			msg.post(storage_sdk.controlls.remote, "back")
		end

		

	elseif message_id == "SberData" then
		-- Приходят какие-то данные с сервера Сбера
		if message.type == "smart_app_data" then
			-- данные от смартаппа
			local data = message.smart_app_data

			if data.type == "set_user_id" and not storage_sdk.player_id then
				-- Приходит id пользователя
				--storage_sdk.player_id = data.user_id
				--storage_sdk.player_id_for_nakama = "sber-"..storage_sdk.player_id

				sber_canvas_sdk_logout.logout(data.user_id)

			elseif data.type == "show_purchase" then
				gui_global_loader_donate.all_loader_visible(self, false, screen_content.get(hash("modal_donate"), "loader_purchase"))

			elseif data.type == "success_purchase" then
				nakama.sync(function (self)
					gui_global_loader_donate.all_loader_visible(self, false, screen_content.get(hash("modal_donate"), "loader_purchase"))

					local callback = loader_sdk_rpc.purhase(storage_sdk.stats.platform_id, "set", {order_id = data.order_id, status = true})
				end)

			elseif data.type == "set_stars" then
				loader_sdk_modules.stars.sdk_set_star(self, data)
			end

		else

		end

	elseif message_id == "RewardShow" then
		if not self.is_reward_show then
			nakama.sync(function ()
				local data = loader_sdk_rpc.add_reward("sber_canvas", message.type)
			end)
			self.is_reward_show = true

			timer.delay(5, false, function (self)
				self.is_reward_show = nil
			end)
		end

	end
end

function init(self)
	-- Создаём пульт
	storage_sdk.controlls.remote = factory.create("#remote_controll_factory")

	if jstodef then
		-- Отлавливаем события в js
		jstodef.add_listener(js_listener)
	end

	-- Устанавливаем настройки
	-- Данные окружения
	storage_sdk.stats = {
		-- Платформа
		platform_id = "sber_canvas",
		-- Тип девайса
		--"mobile/sberbox/sberbox_top/sberbox_time/sberportal"
		device_type = "mobile",
		-- Есть ли возможность выйти из игры
		is_exit = true,
		-- Есть ли лидерборды
		is_lidearboard = false,
		-- Можно ли рейтинг выставлять оценки
		is_rating = true,
		-- Есть ли горизонтальные блоки с рекламой
		is_ads_horisontal_block = false,
		-- Есть ли полноэкранная реклама
		is_ads_fullscreen = true,
		-- Есть ли реклама с вознаграждением
		is_ads_reward = true,
		max_reward_video_today = 3,
		-- Есть ли возможность что либо купить
		is_shop = true,
		-- Есть ли возможность оформить подписку
		is_subscribe = true,
		-- Подарки за действия 
		gifts = {
			rewarded = 25, -- Просмотр ролика
			stars = 100, -- Поставить оценку
		},
		-- Время запуска игры
		start_time_running = os.time(),
		-- Какой раз пользователь запустил игру
		count_play_game = 2,
		count_round_play_game = 0
	}
end

function final(self)
	-- Удаляем прослушивающее 
	if jstodef then
		jstodef.remove_listener(js_listener)
	end
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end